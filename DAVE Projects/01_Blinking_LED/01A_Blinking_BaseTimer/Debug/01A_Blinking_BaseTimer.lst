
01A_Blinking_BaseTimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f30  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08001f30  0c001f30  00009f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1fffc000  1fffc000  00014000  2**0
                  ALLOC
  3 .data         00000038  1fffc800  0c001f38  0000c800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000010  1fffc838  0c001f70  0000c838  2**2
                  ALLOC
  5 .no_init      00000020  20005fc0  20005fc0  00014000  2**2
                  ALLOC
  6 .debug_aranges 000008f8  00000000  00000000  0000c838  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000af21  00000000  00000000  0000d130  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e18  00000000  00000000  00018051  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004696  00000000  00000000  00019e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002470  00000000  00000000  0001e500  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000059f7  00000000  00000000  00020970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000494e  00000000  00000000  00026367  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000788  00000000  00000000  0002acb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 00000546  00000000  00000000  0002b43d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800003c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800004c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 80000e8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000f8:	91 02 00 08 91 02 00 08 91 02 00 08 d1 18 00 08     ................
 8000108:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...
 8000130:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 8000150:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 8000160:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000170:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000180:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000190:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001a0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001b0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 80001d8:	91 02 00 08 00 00 00 00 91 02 00 08 91 02 00 08     ................
 80001e8:	00 00 00 00 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d06c 	ldr.w	sp, [pc, #108]	; 8000270 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1b      	ldr	r4, [pc, #108]	; (8000278 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1c      	ldr	r5, [pc, #112]	; (800027c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c17      	ldr	r4, [pc, #92]	; (8000284 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001f38 	.word	0x0c001f38
 800024c:	1fffc800 	.word	0x1fffc800
 8000250:	00000038 	.word	0x00000038
 8000254:	0c001f38 	.word	0x0c001f38
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fffc838 	.word	0x1fffc838
 8000264:	00000010 	.word	0x00000010
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000

08000270 <__zero_table_end__>:
    .long   0                           /* Not Available                 */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000270:	1fffc800 	.word	0x1fffc800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000274:	08000295 	.word	0x08000295
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000278:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800027c:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000280:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 8000284:	08000270 	.word	0x08000270
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000288:	08001eb9 	.word	0x08001eb9
    blx  r0
#endif

    ldr  r0, =main
 800028c:	080018b9 	.word	0x080018b9

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000294:	b598      	push	{r3, r4, r7, lr}
 8000296:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <SystemInit+0x28>)
 800029a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800029e:	4614      	mov	r4, r2
 80002a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x2c>)
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <SystemInit+0x30>)
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 80002b0:	f001 fa1e 	bl	80016f0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b4:	f001 fa86 	bl	80017c4 <SystemCoreClockSetup>
}
 80002b8:	bd98      	pop	{r3, r4, r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20005fc4 	.word	0x20005fc4
 80002c0:	20005fd4 	.word	0x20005fd4
 80002c4:	20000084 	.word	0x20000084

080002c8 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002ce:	4b2f      	ldr	r3, [pc, #188]	; (800038c <SystemCoreClockUpdate+0xc4>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d03e      	beq.n	8000358 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002da:	4b2d      	ldr	r3, [pc, #180]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002e6:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e002      	b.n	80002f2 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002ec:	f001 fa60 	bl	80017b0 <OSCHP_GetFrequency>
 80002f0:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002f2:	4b27      	ldr	r3, [pc, #156]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d020      	beq.n	8000340 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002fe:	4b24      	ldr	r3, [pc, #144]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000306:	0e1b      	lsrs	r3, r3, #24
 8000308:	3301      	adds	r3, #1
 800030a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000314:	0a1b      	lsrs	r3, r3, #8
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800031a:	4b1d      	ldr	r3, [pc, #116]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000322:	0c1b      	lsrs	r3, r3, #16
 8000324:	3301      	adds	r3, #1
 8000326:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	fbb2 f3f3 	udiv	r3, r2, r3
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	fb02 f303 	mul.w	r3, r2, r3
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	e00d      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <SystemCoreClockUpdate+0xc8>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000348:	3301      	adds	r3, #1
 800034a:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	fbb2 f3f3 	udiv	r3, r2, r3
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	e001      	b.n	800035c <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <SystemCoreClockUpdate+0xcc>)
 800035a:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	b2db      	uxtb	r3, r3
 8000362:	3301      	adds	r3, #1
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	fbb2 f3f3 	udiv	r3, r2, r3
 800036a:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 800036c:	4b07      	ldr	r3, [pc, #28]	; (800038c <SystemCoreClockUpdate+0xc4>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	f003 0301 	and.w	r3, r3, #1
 8000374:	3301      	adds	r3, #1
 8000376:	68fa      	ldr	r2, [r7, #12]
 8000378:	fbb2 f3f3 	udiv	r3, r2, r3
 800037c:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 800037e:	4a06      	ldr	r2, [pc, #24]	; (8000398 <SystemCoreClockUpdate+0xd0>)
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	6013      	str	r3, [r2, #0]
}
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	50004600 	.word	0x50004600
 8000390:	50004710 	.word	0x50004710
 8000394:	016e3600 	.word	0x016e3600
 8000398:	20005fc0 	.word	0x20005fc0

0800039c <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	460b      	mov	r3, r1
 80003a6:	607a      	str	r2, [r7, #4]
 80003a8:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 80003aa:	7afb      	ldrb	r3, [r7, #11]
 80003ac:	089b      	lsrs	r3, r3, #2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4618      	mov	r0, r3
 80003b2:	7afb      	ldrb	r3, [r7, #11]
 80003b4:	089b      	lsrs	r3, r3, #2
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	461a      	mov	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	3204      	adds	r2, #4
 80003be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003c2:	7afb      	ldrb	r3, [r7, #11]
 80003c4:	f003 0303 	and.w	r3, r3, #3
 80003c8:	00db      	lsls	r3, r3, #3
 80003ca:	4619      	mov	r1, r3
 80003cc:	23f8      	movs	r3, #248	; 0xf8
 80003ce:	408b      	lsls	r3, r1
 80003d0:	43db      	mvns	r3, r3
 80003d2:	ea02 0103 	and.w	r1, r2, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	1d02      	adds	r2, r0, #4
 80003da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	4619      	mov	r1, r3
 80003e8:	2303      	movs	r3, #3
 80003ea:	408b      	lsls	r3, r1
 80003ec:	43db      	mvns	r3, r3
 80003ee:	401a      	ands	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	4a38      	ldr	r2, [pc, #224]	; (80004d8 <XMC_GPIO_Init+0x13c>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d10a      	bne.n	8000412 <XMC_GPIO_Init+0x76>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000400:	7afb      	ldrb	r3, [r7, #11]
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f303 	lsl.w	r3, r1, r3
 8000408:	43db      	mvns	r3, r3
 800040a:	401a      	ands	r2, r3
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	661a      	str	r2, [r3, #96]	; 0x60
 8000410:	e042      	b.n	8000498 <XMC_GPIO_Init+0xfc>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	b25b      	sxtb	r3, r3
 800041a:	2b00      	cmp	r3, #0
 800041c:	da3c      	bge.n	8000498 <XMC_GPIO_Init+0xfc>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	409a      	lsls	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4618      	mov	r0, r3
 8000432:	7afb      	ldrb	r3, [r7, #11]
 8000434:	08db      	lsrs	r3, r3, #3
 8000436:	b2db      	uxtb	r3, r3
 8000438:	461a      	mov	r2, r3
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	3210      	adds	r2, #16
 800043e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000442:	7afb      	ldrb	r3, [r7, #11]
 8000444:	f003 0307 	and.w	r3, r3, #7
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4619      	mov	r1, r3
 800044c:	2307      	movs	r3, #7
 800044e:	408b      	lsls	r3, r1
 8000450:	43db      	mvns	r3, r3
 8000452:	ea02 0103 	and.w	r1, r2, r3
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	f100 0210 	add.w	r2, r0, #16
 800045c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000460:	7afb      	ldrb	r3, [r7, #11]
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	b2db      	uxtb	r3, r3
 8000466:	4618      	mov	r0, r3
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	b2db      	uxtb	r3, r3
 800046e:	461a      	mov	r2, r3
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3210      	adds	r2, #16
 8000474:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	7a1b      	ldrb	r3, [r3, #8]
 800047c:	4619      	mov	r1, r3
 800047e:	7afb      	ldrb	r3, [r7, #11]
 8000480:	f003 0307 	and.w	r3, r3, #7
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	ea42 0103 	orr.w	r1, r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	f100 0210 	add.w	r2, r0, #16
 8000494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000498:	7afb      	ldrb	r3, [r7, #11]
 800049a:	089b      	lsrs	r3, r3, #2
 800049c:	b2db      	uxtb	r3, r3
 800049e:	4618      	mov	r0, r3
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	089b      	lsrs	r3, r3, #2
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	3204      	adds	r2, #4
 80004ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	7afb      	ldrb	r3, [r7, #11]
 80004b8:	f003 0303 	and.w	r3, r3, #3
 80004bc:	00db      	lsls	r3, r3, #3
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	ea42 0103 	orr.w	r1, r2, r3
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	1d02      	adds	r2, r0, #4
 80004ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	48028e00 	.word	0x48028e00

080004dc <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_GetMirrorStatus+0x14>)
 80004e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	50004000 	.word	0x50004000

080004f4 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80004fc:	f7ff fee4 	bl	80002c8 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <XMC_SCU_lDelay+0x3c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <XMC_SCU_lDelay+0x40>)
 8000506:	fba2 2303 	umull	r2, r3, r2, r3
 800050a:	0c9a      	lsrs	r2, r3, #18
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	fb02 f303 	mul.w	r3, r2, r3
 8000512:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000514:	2300      	movs	r3, #0
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e003      	b.n	8000522 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 800051a:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3f7      	bcc.n	800051a <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20005fc0 	.word	0x20005fc0
 8000534:	431bde83 	.word	0x431bde83

08000538 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800053e:	685b      	ldr	r3, [r3, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	50004074 	.word	0x50004074

08000550 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	60d3      	str	r3, [r2, #12]
}
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	50004074 	.word	0x50004074

0800056c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800056c:	b5b0      	push	{r4, r5, r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af02      	add	r7, sp, #8
 8000572:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000574:	2000      	movs	r0, #0
 8000576:	f000 f891 	bl	800069c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800057a:	f000 fa5b 	bl	8000a34 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	79db      	ldrb	r3, [r3, #7]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d00a      	beq.n	800059c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000586:	f000 fa93 	bl	8000ab0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800058a:	bf00      	nop
 800058c:	f000 fa7e 	bl	8000a8c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8000590:	4603      	mov	r3, r0
 8000592:	f083 0301 	eor.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1f7      	bne.n	800058c <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	7a5b      	ldrb	r3, [r3, #9]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f8f5 	bl	8000790 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005a6:	bf00      	nop
 80005a8:	f7ff ff98 	bl	80004dc <XMC_SCU_GetMirrorStatus>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d1fa      	bne.n	80005a8 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7a1b      	ldrb	r3, [r3, #8]
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fa16 	bl	80009e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	7c1b      	ldrb	r3, [r3, #16]
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f903 	bl	80007cc <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	7c5b      	ldrb	r3, [r3, #17]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f926 	bl	800081c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	7c9b      	ldrb	r3, [r3, #18]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f90d 	bl	80007f4 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7cdb      	ldrb	r3, [r3, #19]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f930 	bl	8000844 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	799b      	ldrb	r3, [r3, #6]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00a      	beq.n	8000602 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005ec:	f000 fa98 	bl	8000b20 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80005f0:	bf00      	nop
 80005f2:	f000 fabd 	bl	8000b70 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f083 0301 	eor.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f7      	bne.n	80005f2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	799b      	ldrb	r3, [r3, #6]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d017      	beq.n	8000648 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000618:	f000 face 	bl	8000bb8 <XMC_SCU_CLOCK_DisableSystemPll>
 800061c:	e014      	b.n	8000648 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 800061e:	f000 fabb 	bl	8000b98 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	8899      	ldrh	r1, [r3, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800062e:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000634:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4608      	mov	r0, r1
 800063e:	4611      	mov	r1, r2
 8000640:	462a      	mov	r2, r5
 8000642:	4623      	mov	r3, r4
 8000644:	f000 fac8 	bl	8000bd8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000650:	d103      	bne.n	800065a <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8000652:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000656:	f000 f821 	bl	800069c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800065a:	f7ff fe35 	bl	80002c8 <SystemCoreClockUpdate>
}
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bdb0      	pop	{r4, r5, r7, pc}

08000664 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	0f1b      	lsrs	r3, r3, #28
 8000670:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000678:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	4613      	mov	r3, r2
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	4413      	add	r3, r2
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	461a      	mov	r2, r3
 8000686:	4b04      	ldr	r3, [pc, #16]	; (8000698 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8000688:	4413      	add	r3, r2
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	50004414 	.word	0x50004414

0800069c <XMC_SCU_CLOCK_SetSystemClockSource>:
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006a4:	4906      	ldr	r1, [pc, #24]	; (80006c0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	50004600 	.word	0x50004600

080006c4 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 80006cc:	4906      	ldr	r1, [pc, #24]	; (80006e8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4313      	orrs	r3, r2
 80006da:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	50004600 	.word	0x50004600

080006ec <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 80006f4:	4906      	ldr	r1, [pc, #24]	; (8000710 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 80006f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4313      	orrs	r3, r2
 8000702:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	50004600 	.word	0x50004600

08000714 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d108      	bne.n	8000736 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000724:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800072e:	f023 0301 	bic.w	r3, r3, #1
 8000732:	60d3      	str	r3, [r2, #12]
 8000734:	e007      	b.n	8000746 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000736:	4a06      	ldr	r2, [pc, #24]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	60d3      	str	r3, [r2, #12]
  }
}
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	50004710 	.word	0x50004710

08000754 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800075e:	bf00      	nop
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000762:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1f8      	bne.n	8000760 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800076e:	4907      	ldr	r1, [pc, #28]	; (800078c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000778:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 800077a:	4313      	orrs	r3, r2
 800077c:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	50004000 	.word	0x50004000
 800078c:	50004300 	.word	0x50004300

08000790 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800079a:	bf00      	nop
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800079e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d1f8      	bne.n	800079c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007aa:	4907      	ldr	r1, [pc, #28]	; (80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007b4:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007b6:	4313      	orrs	r3, r2
 80007b8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	50004000 	.word	0x50004000
 80007c8:	50004300 	.word	0x50004300

080007cc <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007d4:	4906      	ldr	r1, [pc, #24]	; (80007f0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 80007d8:	68db      	ldr	r3, [r3, #12]
 80007da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 80007e2:	4313      	orrs	r3, r2
 80007e4:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	50004600 	.word	0x50004600

080007f4 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 80007fc:	4906      	ldr	r1, [pc, #24]	; (8000818 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000800:	6a1b      	ldr	r3, [r3, #32]
 8000802:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800080a:	4313      	orrs	r3, r2
 800080c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	50004600 	.word	0x50004600

0800081c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000824:	4906      	ldr	r1, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000832:	4313      	orrs	r3, r2
 8000834:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	50004600 	.word	0x50004600

08000844 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800085a:	4313      	orrs	r3, r2
 800085c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	50004600 	.word	0x50004600

0800086c <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000882:	4313      	orrs	r3, r2
 8000884:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	50004600 	.word	0x50004600

08000894 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800089c:	4906      	ldr	r1, [pc, #24]	; (80008b8 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008aa:	4313      	orrs	r3, r2
 80008ac:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	50004600 	.word	0x50004600

080008bc <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 80008c6:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	6053      	str	r3, [r2, #4]
}
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	50004600 	.word	0x50004600

080008dc <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	0f1b      	lsrs	r3, r3, #28
 80008e8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80008f0:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	4613      	mov	r3, r2
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	4413      	add	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000900:	4413      	add	r3, r2
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	601a      	str	r2, [r3, #0]
}
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	50004648 	.word	0x50004648

08000914 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000922:	f023 0302 	bic.w	r3, r3, #2
 8000926:	6153      	str	r3, [r2, #20]
}
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	50004710 	.word	0x50004710

08000934 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800093e:	4a28      	ldr	r2, [pc, #160]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000940:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 800094a:	bf00      	nop
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800094e:	691b      	ldr	r3, [r3, #16]
 8000950:	f003 0301 	and.w	r3, r3, #1
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0f9      	beq.n	800094c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000958:	4a21      	ldr	r2, [pc, #132]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f043 0310 	orr.w	r3, r3, #16
 8000962:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000964:	491e      	ldr	r1, [pc, #120]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	3b01      	subs	r3, #1
 800096a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000972:	4313      	orrs	r3, r2
 8000974:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000976:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000982:	4a17      	ldr	r2, [pc, #92]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	f023 0310 	bic.w	r3, r3, #16
 800098c:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000998:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800099a:	bf00      	nop
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f9      	beq.n	800099c <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f023 0301 	bic.w	r3, r3, #1
 80009b2:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 80009b4:	bf00      	nop
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009b8:	691b      	ldr	r3, [r3, #16]
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1f9      	bne.n	80009b6 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009cc:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 80009d0:	2208      	movs	r2, #8
 80009d2:	60da      	str	r2, [r3, #12]
}
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	50004710 	.word	0x50004710
 80009e4:	50004160 	.word	0x50004160

080009e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80009f2:	4a0f      	ldr	r2, [pc, #60]	; (8000a30 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80009fc:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d10e      	bne.n	8000a22 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a0e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a10:	2064      	movs	r0, #100	; 0x64
 8000a12:	f7ff fd6f 	bl	80004f4 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a16:	4a06      	ldr	r2, [pc, #24]	; (8000a30 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a20:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a22:	2064      	movs	r0, #100	; 0x64
 8000a24:	f7ff fd66 	bl	80004f4 <XMC_SCU_lDelay>
}
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	50004710 	.word	0x50004710

08000a34 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d109      	bne.n	8000a58 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a4a:	bf00      	nop
 8000a4c:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0f9      	beq.n	8000a4c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00a      	beq.n	8000a7a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000a6c:	bf00      	nop
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1f9      	bne.n	8000a6e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	50004200 	.word	0x50004200
 8000a88:	50004400 	.word	0x50004400

08000a8c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	bf0c      	ite	eq
 8000a9c:	2301      	moveq	r3, #1
 8000a9e:	2300      	movne	r3, #0
 8000aa0:	b2db      	uxtb	r3, r3
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	50004300 	.word	0x50004300

08000ab0 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000ab4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ab8:	f7ff fd4a 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000abc:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ac6:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000ac8:	bf00      	nop
 8000aca:	f7ff fd35 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d0f8      	beq.n	8000aca <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000ad8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000adc:	f7ff fd38 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ae2:	2208      	movs	r2, #8
 8000ae4:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000ae6:	bf00      	nop
 8000ae8:	f7ff fd26 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f8      	beq.n	8000ae8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000af6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000afa:	f7ff fd29 	bl	8000550 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000afe:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	f043 0308 	orr.w	r3, r3, #8
 8000b08:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000b0a:	bf00      	nop
 8000b0c:	f7ff fd14 	bl	8000538 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0f8      	beq.n	8000b0c <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	50004300 	.word	0x50004300

08000b20 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b2e:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b30:	4d0d      	ldr	r5, [pc, #52]	; (8000b68 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b3a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b3e:	f000 fe37 	bl	80017b0 <OSCHP_GetFrequency>
 8000b42:	4602      	mov	r2, r0
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000b46:	fba3 2302 	umull	r2, r3, r3, r2
 8000b4a:	0d1b      	lsrs	r3, r3, #20
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b50:	4323      	orrs	r3, r4
 8000b52:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b54:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b56:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b5e:	6053      	str	r3, [r2, #4]
}
 8000b60:	bdb0      	pop	{r4, r5, r7, pc}
 8000b62:	bf00      	nop
 8000b64:	50004710 	.word	0x50004710
 8000b68:	50004700 	.word	0x50004700
 8000b6c:	6b5fca6b 	.word	0x6b5fca6b

08000b70 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b7c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b80:	bf0c      	ite	eq
 8000b82:	2301      	moveq	r3, #1
 8000b84:	2300      	movne	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	50004710 	.word	0x50004710

08000b98 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b9c:	4a05      	ldr	r2, [pc, #20]	; (8000bb4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba6:	f023 0302 	bic.w	r3, r3, #2
 8000baa:	6053      	str	r3, [r2, #4]
}
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	50004710 	.word	0x50004710

08000bb8 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	6053      	str	r3, [r2, #4]
}
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	50004710 	.word	0x50004710

08000bd8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60ba      	str	r2, [r7, #8]
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4603      	mov	r3, r0
 8000be4:	81fb      	strh	r3, [r7, #14]
 8000be6:	460b      	mov	r3, r1
 8000be8:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fd91 	bl	8000714 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000bf2:	7b7b      	ldrb	r3, [r7, #13]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	f040 808b 	bne.w	8000d10 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000bfa:	89fb      	ldrh	r3, [r7, #14]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d109      	bne.n	8000c14 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000c00:	f000 fdd6 	bl	80017b0 <OSCHP_GetFrequency>
 8000c04:	4602      	mov	r2, r0
 8000c06:	4b54      	ldr	r3, [pc, #336]	; (8000d58 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000c08:	fba3 2302 	umull	r2, r3, r3, r2
 8000c0c:	0c9b      	lsrs	r3, r3, #18
 8000c0e:	059b      	lsls	r3, r3, #22
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e002      	b.n	8000c1a <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000c14:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000c18:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	fb02 f203 	mul.w	r2, r2, r3
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c28:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	4a4b      	ldr	r2, [pc, #300]	; (8000d5c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	091b      	lsrs	r3, r3, #4
 8000c34:	0d9b      	lsrs	r3, r3, #22
 8000c36:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c38:	4a49      	ldr	r2, [pc, #292]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c3a:	4b49      	ldr	r3, [pc, #292]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000c44:	bf00      	nop
 8000c46:	4b46      	ldr	r3, [pc, #280]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f9      	beq.n	8000c46 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c52:	4a43      	ldr	r2, [pc, #268]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c54:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f043 0310 	orr.w	r3, r3, #16
 8000c5c:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c5e:	4940      	ldr	r1, [pc, #256]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c60:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000c66:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	3a01      	subs	r2, #1
 8000c6c:	0212      	lsls	r2, r2, #8
 8000c6e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c76:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c82:	4a37      	ldr	r2, [pc, #220]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8c:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c8e:	4a34      	ldr	r2, [pc, #208]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c90:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f023 0310 	bic.w	r3, r3, #16
 8000c98:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c9a:	4a31      	ldr	r2, [pc, #196]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c9c:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca4:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000ca6:	bf00      	nop
 8000ca8:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0f9      	beq.n	8000ca8 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cb4:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f023 0301 	bic.w	r3, r3, #1
 8000cbe:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000cc0:	bf00      	nop
 8000cc2:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f9      	bne.n	8000cc2 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	4a25      	ldr	r2, [pc, #148]	; (8000d68 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	095b      	lsrs	r3, r3, #5
 8000cd8:	0d9b      	lsrs	r3, r3, #22
 8000cda:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cdc:	6a3a      	ldr	r2, [r7, #32]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d202      	bcs.n	8000cea <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000ce4:	6938      	ldr	r0, [r7, #16]
 8000ce6:	f000 f845 	bl	8000d74 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	085b      	lsrs	r3, r3, #1
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	095b      	lsrs	r3, r3, #5
 8000cf6:	0d9b      	lsrs	r3, r3, #22
 8000cf8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cfa:	6a3a      	ldr	r2, [r7, #32]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d202      	bcs.n	8000d08 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d02:	6938      	ldr	r0, [r7, #16]
 8000d04:	f000 f836 	bl	8000d74 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d08:	6a38      	ldr	r0, [r7, #32]
 8000d0a:	f000 f833 	bl	8000d74 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d0e:	e01c      	b.n	8000d4a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d10:	4913      	ldr	r1, [pc, #76]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
 8000d1c:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000d22:	bf00      	nop
 8000d24:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0f9      	beq.n	8000d24 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d30:	4a0b      	ldr	r2, [pc, #44]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d3c:	bf00      	nop
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f9      	beq.n	8000d3e <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000d4c:	2205      	movs	r2, #5
 8000d4e:	60da      	str	r2, [r3, #12]
}
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	aaaaaaab 	.word	0xaaaaaaab
 8000d60:	50004710 	.word	0x50004710
 8000d64:	f08080ff 	.word	0xf08080ff
 8000d68:	88888889 	.word	0x88888889
 8000d6c:	b60b60b7 	.word	0xb60b60b7
 8000d70:	50004160 	.word	0x50004160

08000d74 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d7c:	490b      	ldr	r1, [pc, #44]	; (8000dac <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000d90:	bf00      	nop
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0320 	and.w	r3, r3, #32
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f9      	beq.n	8000d92 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000d9e:	2032      	movs	r0, #50	; 0x32
 8000da0:	f7ff fba8 	bl	80004f4 <XMC_SCU_lDelay>
}
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	50004710 	.word	0x50004710

08000db0 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dbe:	60da      	str	r2, [r3, #12]
}
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <XMC_CCU4_lDeassertReset+0x2c>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d103      	bne.n	8000de4 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8000ddc:	2004      	movs	r0, #4
 8000dde:	f7ff fc41 	bl	8000664 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000de2:	e006      	b.n	8000df2 <XMC_CCU4_lDeassertReset+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <XMC_CCU4_lDeassertReset+0x30>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d102      	bne.n	8000df2 <XMC_CCU4_lDeassertReset+0x26>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8000dec:	2008      	movs	r0, #8
 8000dee:	f7ff fc39 	bl	8000664 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	4000c000 	.word	0x4000c000
 8000dfc:	40010000 	.word	0x40010000

08000e00 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <XMC_CCU4_lUngateClock+0x2c>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d103      	bne.n	8000e18 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8000e10:	2004      	movs	r0, #4
 8000e12:	f7ff fd63 	bl	80008dc <XMC_SCU_CLOCK_UngatePeripheralClock>
 8000e16:	e006      	b.n	8000e26 <XMC_CCU4_lUngateClock+0x26>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <XMC_CCU4_lUngateClock+0x30>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d102      	bne.n	8000e26 <XMC_CCU4_lUngateClock+0x26>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8000e20:	2008      	movs	r0, #8
 8000e22:	f7ff fd5b 	bl	80008dc <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	4000c000 	.word	0x4000c000
 8000e30:	40010000 	.word	0x40010000

08000e34 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000e3c:	2010      	movs	r0, #16
 8000e3e:	f7ff fd3d 	bl	80008bc <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffdc 	bl	8000e00 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffbf 	bl	8000dcc <XMC_CCU4_lDeassertReset>
#endif
}
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ffe7 	bl	8000e34 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e78:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000e7a:	78fb      	ldrb	r3, [r7, #3]
 8000e7c:	039b      	lsls	r3, r3, #14
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	601a      	str	r2, [r3, #0]
}
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	795b      	ldrb	r3, [r3, #5]
 8000ea6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	051a      	lsls	r2, r3, #20
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	791b      	ldrb	r3, [r3, #4]
 8000eb6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	795b      	ldrb	r3, [r3, #5]
 8000ec6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	795b      	ldrb	r3, [r3, #5]
 8000ed6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	791b      	ldrb	r3, [r3, #4]
 8000ee6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f14:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	021b      	lsls	r3, r3, #8
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8000f26:	78fa      	ldrb	r2, [r7, #3]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
 8000f44:	4613      	mov	r3, r2
 8000f46:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8000f48:	78fb      	ldrb	r3, [r7, #3]
 8000f4a:	2b0b      	cmp	r3, #11
 8000f4c:	d836      	bhi.n	8000fbc <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 8000f4e:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8000f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f54:	08000f85 	.word	0x08000f85
 8000f58:	08000f85 	.word	0x08000f85
 8000f5c:	08000f8f 	.word	0x08000f8f
 8000f60:	08000f8f 	.word	0x08000f8f
 8000f64:	08000fbd 	.word	0x08000fbd
 8000f68:	08000fbd 	.word	0x08000fbd
 8000f6c:	08000fbd 	.word	0x08000fbd
 8000f70:	08000fbd 	.word	0x08000fbd
 8000f74:	08000f99 	.word	0x08000f99
 8000f78:	08000fa5 	.word	0x08000fa5
 8000f7c:	08000fb1 	.word	0x08000fb1
 8000f80:	08000fb1 	.word	0x08000fb1
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8000f84:	2303      	movs	r3, #3
 8000f86:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
      break;
 8000f8c:	e01b      	b.n	8000fc6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8000f8e:	230c      	movs	r3, #12
 8000f90:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8000f92:	2302      	movs	r3, #2
 8000f94:	617b      	str	r3, [r7, #20]
      break;
 8000f96:	e016      	b.n	8000fc6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8000f98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f9c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	617b      	str	r3, [r7, #20]
      break;
 8000fa2:	e010      	b.n	8000fc6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8000fa4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fa8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8000faa:	230a      	movs	r3, #10
 8000fac:	617b      	str	r3, [r7, #20]
      break;
 8000fae:	e00a      	b.n	8000fc6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8000fb0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000fb4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8000fb6:	230c      	movs	r3, #12
 8000fb8:	617b      	str	r3, [r7, #20]
      break;
 8000fba:	e004      	b.n	8000fc6 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
	  pos = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
	  break;
 8000fc4:	bf00      	nop
  }

  if (mask != 0)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d013      	beq.n	8000ff4 <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000fd2:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8000fde:	78ba      	ldrb	r2, [r7, #2]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8000ff4:	371c      	adds	r7, #28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
 800100c:	4613      	mov	r3, r2
 800100e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4619      	mov	r1, r3
 800101a:	2303      	movs	r3, #3
 800101c:	408b      	lsls	r3, r1
 800101e:	43db      	mvns	r3, r3
 8001020:	401a      	ands	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800102a:	78bb      	ldrb	r3, [r7, #2]
 800102c:	78f9      	ldrb	r1, [r7, #3]
 800102e:	0049      	lsls	r1, r1, #1
 8001030:	408b      	lsls	r3, r1
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <_init>:
  }
}

/* Init */
void _init(void)
{}
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 800105c:	78fb      	ldrb	r3, [r7, #3]
 800105e:	2201      	movs	r2, #1
 8001060:	409a      	lsls	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60da      	str	r2, [r3, #12]
}
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b00      	cmp	r3, #0
 8001082:	bf14      	ite	ne
 8001084:	2301      	movne	r3, #1
 8001086:	2300      	moveq	r3, #0
 8001088:	b2db      	uxtb	r3, r3
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	60da      	str	r2, [r3, #12]
}
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	611a      	str	r2, [r3, #16]
}
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2202      	movs	r2, #2
 80010d4:	611a      	str	r2, [r3, #16]
}
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80010ec:	887a      	ldrh	r2, [r7, #2]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8001108:	887a      	ldrh	r2, [r7, #2]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	611a      	str	r2, [r3, #16]
}
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop

08001134 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	431a      	orrs	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	2201      	movs	r2, #1
 8001170:	409a      	lsls	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001196:	f083 0301 	eor.w	r3, r3, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d009      	beq.n	80011b4 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d104      	bne.n	80011b4 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f90a 	bl	80013c4 <TIMER_CCU4_lInit>
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop

080011c0 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00c      	beq.n	80011ec <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d104      	bne.n	80011e6 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff59 	bl	8001098 <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	e001      	b.n	80011f0 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop

080011fc <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f81d 	bl	8001244 <TIMER_GetTimerStatus>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d011      	beq.n	8001234 <TIMER_Stop+0x38>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00c      	beq.n	8001234 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001220:	2b00      	cmp	r3, #0
 8001222:	d104      	bne.n	800122e <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff41 	bl	80010b0 <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e001      	b.n	8001238 <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop

08001244 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff06 	bl	8001070 <XMC_CCU4_SLICE_IsTimerRunning>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	0000      	movs	r0, r0
	...

08001278 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8001282:	2301      	movs	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffdc 	bl	8001244 <TIMER_GetTimerStatus>
 800128c:	4603      	mov	r3, r0
 800128e:	f083 0301 	eor.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d079      	beq.n	800138c <TIMER_SetTimeInterval+0x114>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d874      	bhi.n	800138c <TIMER_SetTimeInterval+0x114>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d36f      	bcc.n	800138c <TIMER_SetTimeInterval+0x114>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 80012b0:	e002      	b.n	80012b8 <TIMER_SetTimeInterval+0x40>
      {
        lprescaler++;
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	3301      	adds	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	f1c2 020f 	rsb	r2, r2, #15
 80012c2:	fa23 f202 	lsr.w	r2, r3, r2
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3f2      	bcc.n	80012b2 <TIMER_SetTimeInterval+0x3a>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d15a      	bne.n	800138c <TIMER_SetTimeInterval+0x114>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69da      	ldr	r2, [r3, #28]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	b2d9      	uxtb	r1, r3
 80012ec:	7913      	ldrb	r3, [r2, #4]
 80012ee:	f361 0303 	bfi	r3, r1, #0, #4
 80012f2:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f04f 0100 	mov.w	r1, #0
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	461a      	mov	r2, r3
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	fb02 fe01 	mul.w	lr, r2, r1
 8001308:	fb00 f603 	mul.w	r6, r0, r3
 800130c:	4476      	add	r6, lr
 800130e:	fba0 2302 	umull	r2, r3, r0, r2
 8001312:	18f1      	adds	r1, r6, r3
 8001314:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	69c9      	ldr	r1, [r1, #28]
 800131a:	7909      	ldrb	r1, [r1, #4]
 800131c:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8001320:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8001322:	f1c1 0620 	rsb	r6, r1, #32
 8001326:	f1a1 0020 	sub.w	r0, r1, #32
 800132a:	fa22 f401 	lsr.w	r4, r2, r1
 800132e:	fa03 f606 	lsl.w	r6, r3, r6
 8001332:	4334      	orrs	r4, r6
 8001334:	fa23 f000 	lsr.w	r0, r3, r0
 8001338:	4304      	orrs	r4, r0
 800133a:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 800133e:	4620      	mov	r0, r4
 8001340:	4629      	mov	r1, r5
 8001342:	a315      	add	r3, pc, #84	; (adr r3, 8001398 <TIMER_SetTimeInterval+0x120>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f000 faea 	bl	8001920 <__aeabi_uldivmod>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8001350:	b292      	uxth	r2, r2
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	845a      	strh	r2, [r3, #34]	; 0x22
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800135a:	2b01      	cmp	r3, #1
 800135c:	d905      	bls.n	800136a <TIMER_SetTimeInterval+0xf2>
        {
          (handle_ptr->period_value)--;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001362:	3b01      	subs	r3, #1
 8001364:	b29a      	uxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	845a      	strh	r2, [r3, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	791b      	ldrb	r3, [r3, #4]
 8001374:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4610      	mov	r0, r2
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fdbd 	bl	8000efc <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f86a 	bl	800145c <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 8001388:	2300      	movs	r3, #0
 800138a:	75fb      	strb	r3, [r7, #23]
        status = TIMER_STATUS_SUCCESS;
      }
#endif
    }
  }
  return (status);
 800138c:	7dfb      	ldrb	r3, [r7, #23]
}
 800138e:	4618      	mov	r0, r3
 8001390:	371c      	adds	r7, #28
 8001392:	46bd      	mov	sp, r7
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001396:	bf00      	nop
 8001398:	05f5e100 	.word	0x05f5e100
 800139c:	00000000 	.word	0x00000000

080013a0 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	4618      	mov	r0, r3
 80013b8:	2100      	movs	r1, #0
 80013ba:	f7ff fed1 	bl	8001160 <XMC_CCU4_SLICE_ClearEvent>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
}
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f929 	bl	8001628 <GLOBAL_CCU4_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7e1b      	ldrb	r3, [r3, #24]
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fe32 	bl	8001050 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695a      	ldr	r2, [r3, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fd4a 	bl	8000e90 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f82d 	bl	800145c <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00f      	beq.n	800142c <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695a      	ldr	r2, [r3, #20]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001416:	4610      	mov	r0, r2
 8001418:	2100      	movs	r1, #0
 800141a:	461a      	mov	r2, r3
 800141c:	f7ff fd8c 	bl	8000f38 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	4618      	mov	r0, r3
 8001426:	2100      	movs	r1, #0
 8001428:	f7ff fe84 	bl	8001134 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fe49 	bl	80010c8 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fe23 	bl	8001098 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695a      	ldr	r2, [r3, #20]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fe36 	bl	80010e0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	4618      	mov	r0, r3
 800147a:	2100      	movs	r1, #0
 800147c:	f7ff fe3e 	bl	80010fc <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fe43 	bl	8001118 <XMC_CCU4_EnableShadowTransfer>
}
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014a4:	0a1b      	lsrs	r3, r3, #8
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_EnableIRQ+0x34>)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	095b      	lsrs	r3, r3, #5
 80014ce:	79fa      	ldrb	r2, [r7, #7]
 80014d0:	f002 021f 	and.w	r2, r2, #31
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100

080014ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	6039      	str	r1, [r7, #0]
 80014f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	db0a      	blt.n	8001516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001500:	490d      	ldr	r1, [pc, #52]	; (8001538 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	440b      	add	r3, r1
 8001510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001514:	e00a      	b.n	800152c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001516:	4909      	ldr	r1, [pc, #36]	; (800153c <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	440b      	add	r3, r1
 800152a:	761a      	strb	r2, [r3, #24]
  }
}
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b480      	push	{r7}
 8001542:	b089      	sub	sp, #36	; 0x24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f1c3 0307 	rsb	r3, r3, #7
 800155a:	2b06      	cmp	r3, #6
 800155c:	bf28      	it	cs
 800155e:	2306      	movcs	r3, #6
 8001560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3306      	adds	r3, #6
 8001566:	2b06      	cmp	r3, #6
 8001568:	d902      	bls.n	8001570 <NVIC_EncodePriority+0x30>
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3b01      	subs	r3, #1
 800156e:	e000      	b.n	8001572 <NVIC_EncodePriority+0x32>
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2201      	movs	r2, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	1e5a      	subs	r2, r3, #1
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	401a      	ands	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	1e59      	subs	r1, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001594:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop

080015a4 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff7e 	bl	80014b4 <__NVIC_EnableIRQ>
}
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop

080015c0 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	781c      	ldrb	r4, [r3, #0]
 80015cc:	f7ff ff64 	bl	8001498 <__NVIC_GetPriorityGrouping>
 80015d0:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80015d6:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 80015dc:	4608      	mov	r0, r1
 80015de:	4611      	mov	r1, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	f7ff ffad 	bl	8001540 <NVIC_EncodePriority>
 80015e6:	4602      	mov	r2, r0
 80015e8:	b263      	sxtb	r3, r4
 80015ea:	4618      	mov	r0, r3
 80015ec:	4611      	mov	r1, r2
 80015ee:	f7ff ff7d 	bl	80014ec <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	78db      	ldrb	r3, [r3, #3]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffd2 	bl	80015a4 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}
 800160a:	bf00      	nop

0800160c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161a:	60da      	str	r2, [r3, #12]
}
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7b5b      	ldrb	r3, [r3, #13]
 8001634:	f083 0301 	eor.w	r3, r3, #1
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00f      	beq.n	800165e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7b1b      	ldrb	r3, [r3, #12]
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fc03 	bl	8000e54 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ffda 	bl	800160c <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7c1a      	ldrb	r2, [r3, #16]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3304      	adds	r3, #4
 800167c:	4608      	mov	r0, r1
 800167e:	4611      	mov	r1, r2
 8001680:	461a      	mov	r2, r3
 8001682:	f7fe fe8b 	bl	800039c <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7c1a      	ldrb	r2, [r3, #16]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7c5b      	ldrb	r3, [r3, #17]
 8001692:	4608      	mov	r0, r1
 8001694:	4611      	mov	r1, r2
 8001696:	461a      	mov	r2, r3
 8001698:	f7ff fcb2 	bl	8001000 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f7ff ffd6 	bl	80016a8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <SystemCoreSetup+0x94>)
 8001700:	4a21      	ldr	r2, [pc, #132]	; (8001788 <SystemCoreSetup+0x98>)
 8001702:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001704:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001708:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800170a:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <SystemCoreSetup+0x94>)
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <SystemCoreSetup+0x94>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001712:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001716:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <SystemCoreSetup+0x9c>)
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001720:	3314      	adds	r3, #20
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f023 030f 	bic.w	r3, r3, #15
 800172c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <SystemCoreSetup+0x9c>)
 8001738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173c:	3314      	adds	r3, #20
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <SystemCoreSetup+0x94>)
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <SystemCoreSetup+0x94>)
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	f023 0310 	bic.w	r3, r3, #16
 800174c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800174e:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <SystemCoreSetup+0x94>)
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <SystemCoreSetup+0x94>)
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	f023 0308 	bic.w	r3, r3, #8
 8001758:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <SystemCoreSetup+0x94>)
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <SystemCoreSetup+0x94>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001764:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <SystemCoreSetup+0x94>)
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <SystemCoreSetup+0x94>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001770:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8001772:	4a04      	ldr	r2, [pc, #16]	; (8001784 <SystemCoreSetup+0x94>)
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <SystemCoreSetup+0x94>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800177c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	08000000 	.word	0x08000000
 800178c:	58001000 	.word	0x58001000

08001790 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8001798:	2300      	movs	r3, #0
 800179a:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]

  return (status);
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <OSCHP_GetFrequency+0x10>)
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	00b71b00 	.word	0x00b71b00

080017c4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80017c4:	b5b0      	push	{r4, r5, r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <SystemCoreClockSetup+0x4c>)
 80017cc:	1d3c      	adds	r4, r7, #4
 80017ce:	461d      	mov	r5, r3
 80017d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017d4:	682b      	ldr	r3, [r5, #0]
 80017d6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fec6 	bl	800056c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f7fe ffb7 	bl	8000754 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7fe ff6c 	bl	80006c4 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80017ec:	2004      	movs	r0, #4
 80017ee:	f7ff f83d 	bl	800086c <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 80017f2:	f7ff f88f 	bl	8000914 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80017f6:	2001      	movs	r0, #1
 80017f8:	2120      	movs	r1, #32
 80017fa:	f7ff f89b 	bl	8000934 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80017fe:	2000      	movs	r0, #0
 8001800:	f7fe ff74 	bl	80006ec <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8001804:	2001      	movs	r0, #1
 8001806:	f7ff f845 	bl	8000894 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

}
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bdb0      	pop	{r4, r5, r7, pc}
 8001810:	08001f1c 	.word	0x08001f1c

08001814 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 800181a:	2300      	movs	r3, #0
 800181c:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 800181e:	4811      	ldr	r0, [pc, #68]	; (8001864 <DAVE_Init+0x50>)
 8001820:	f7ff ffb6 	bl	8001790 <CLOCK_XMC4_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d104      	bne.n	8001838 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 800182e:	480e      	ldr	r0, [pc, #56]	; (8001868 <DAVE_Init+0x54>)
 8001830:	f7ff ff1a 	bl	8001668 <DIGITAL_IO_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d104      	bne.n	8001848 <DAVE_Init+0x34>
  {
	 /**  Initialization of TIMER APP instance TIMER */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER); 
 800183e:	480b      	ldr	r0, [pc, #44]	; (800186c <DAVE_Init+0x58>)
 8001840:	f7ff fca0 	bl	8001184 <TIMER_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d104      	bne.n	8001858 <DAVE_Init+0x44>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <DAVE_Init+0x5c>)
 8001850:	f7ff feb6 	bl	80015c0 <INTERRUPT_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8001858:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	1fffc840 	.word	0x1fffc840
 8001868:	08001f08 	.word	0x08001f08
 800186c:	1fffc800 	.word	0x1fffc800
 8001870:	08001f04 	.word	0x08001f04

08001874 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001886:	409a      	lsls	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	605a      	str	r2, [r3, #4]
}
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7c1b      	ldrb	r3, [r3, #16]
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff ffe2 	bl	8001874 <XMC_GPIO_ToggleOutput>
}
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop

080018b8 <main>:
#define TIMER_d1MS 100*100U

volatile uint32_t timetick_count = 0; // Global variable (unsigned-int 32bit) for time tick count

int main(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80018be:	f7ff ffa9 	bl	8001814 <DAVE_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if (status != DAVE_STATUS_SUCCESS)
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d000      	beq.n	80018ce <main+0x16>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
    while(1U)
    {
    }
 80018cc:	e7fe      	b.n	80018cc <main+0x14>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */

	  while(1U)
	  {
	  }
 80018ce:	e7fe      	b.n	80018ce <main+0x16>

080018d0 <CCU41_1_IRQHandler>:
	  return 1;
}

void interval_handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	TIMER_ClearEvent(&TIMER);
 80018d4:	480f      	ldr	r0, [pc, #60]	; (8001914 <CCU41_1_IRQHandler+0x44>)
 80018d6:	f7ff fd63 	bl	80013a0 <TIMER_ClearEvent>
	TIMER_Stop(&TIMER);
 80018da:	480e      	ldr	r0, [pc, #56]	; (8001914 <CCU41_1_IRQHandler+0x44>)
 80018dc:	f7ff fc8e 	bl	80011fc <TIMER_Stop>
	/* Set the time division for the TIMER */
	TIMER_SetTimeInterval(&TIMER , TIMER_d1MS);
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <CCU41_1_IRQHandler+0x44>)
 80018e2:	f242 7110 	movw	r1, #10000	; 0x2710
 80018e6:	f7ff fcc7 	bl	8001278 <TIMER_SetTimeInterval>

	if(timetick_count == 200) // Condition will be based on the desired frequency. Eg: 20Hz @ interval of 0.1ms = 500 ticks
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <CCU41_1_IRQHandler+0x48>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2bc8      	cmp	r3, #200	; 0xc8
 80018f0:	d106      	bne.n	8001900 <CCU41_1_IRQHandler+0x30>
	{
		DIGITAL_IO_ToggleOutput(&LED1);
 80018f2:	480a      	ldr	r0, [pc, #40]	; (800191c <CCU41_1_IRQHandler+0x4c>)
 80018f4:	f7ff ffd0 	bl	8001898 <DIGITAL_IO_ToggleOutput>
		timetick_count = 0;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <CCU41_1_IRQHandler+0x48>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e004      	b.n	800190a <CCU41_1_IRQHandler+0x3a>
	}
	else
	{
		timetick_count++;
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <CCU41_1_IRQHandler+0x48>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <CCU41_1_IRQHandler+0x48>)
 8001908:	6013      	str	r3, [r2, #0]
	}
	TIMER_Start(&TIMER);
 800190a:	4802      	ldr	r0, [pc, #8]	; (8001914 <CCU41_1_IRQHandler+0x44>)
 800190c:	f7ff fc58 	bl	80011c0 <TIMER_Start>
}
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	1fffc800 	.word	0x1fffc800
 8001918:	1fffc844 	.word	0x1fffc844
 800191c:	08001f08 	.word	0x08001f08

08001920 <__aeabi_uldivmod>:
 8001920:	b94b      	cbnz	r3, 8001936 <__aeabi_uldivmod+0x16>
 8001922:	b942      	cbnz	r2, 8001936 <__aeabi_uldivmod+0x16>
 8001924:	2900      	cmp	r1, #0
 8001926:	bf08      	it	eq
 8001928:	2800      	cmpeq	r0, #0
 800192a:	d002      	beq.n	8001932 <__aeabi_uldivmod+0x12>
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	4608      	mov	r0, r1
 8001932:	f000 b83b 	b.w	80019ac <__aeabi_idiv0>
 8001936:	b082      	sub	sp, #8
 8001938:	46ec      	mov	ip, sp
 800193a:	e92d 5000 	stmdb	sp!, {ip, lr}
 800193e:	f000 f81d 	bl	800197c <__gnu_uldivmod_helper>
 8001942:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001946:	b002      	add	sp, #8
 8001948:	bc0c      	pop	{r2, r3}
 800194a:	4770      	bx	lr

0800194c <__gnu_ldivmod_helper>:
 800194c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001950:	9c06      	ldr	r4, [sp, #24]
 8001952:	4615      	mov	r5, r2
 8001954:	4606      	mov	r6, r0
 8001956:	460f      	mov	r7, r1
 8001958:	4698      	mov	r8, r3
 800195a:	f000 f829 	bl	80019b0 <__divdi3>
 800195e:	fb05 f301 	mul.w	r3, r5, r1
 8001962:	fb00 3808 	mla	r8, r0, r8, r3
 8001966:	fba5 2300 	umull	r2, r3, r5, r0
 800196a:	1ab2      	subs	r2, r6, r2
 800196c:	4443      	add	r3, r8
 800196e:	eb67 0303 	sbc.w	r3, r7, r3
 8001972:	e9c4 2300 	strd	r2, r3, [r4]
 8001976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800197a:	bf00      	nop

0800197c <__gnu_uldivmod_helper>:
 800197c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001980:	9c06      	ldr	r4, [sp, #24]
 8001982:	4690      	mov	r8, r2
 8001984:	4606      	mov	r6, r0
 8001986:	460f      	mov	r7, r1
 8001988:	461d      	mov	r5, r3
 800198a:	f000 f95f 	bl	8001c4c <__udivdi3>
 800198e:	fb00 f505 	mul.w	r5, r0, r5
 8001992:	fba0 2308 	umull	r2, r3, r0, r8
 8001996:	fb08 5501 	mla	r5, r8, r1, r5
 800199a:	1ab2      	subs	r2, r6, r2
 800199c:	442b      	add	r3, r5
 800199e:	eb67 0303 	sbc.w	r3, r7, r3
 80019a2:	e9c4 2300 	strd	r2, r3, [r4]
 80019a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019aa:	bf00      	nop

080019ac <__aeabi_idiv0>:
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop

080019b0 <__divdi3>:
 80019b0:	2900      	cmp	r1, #0
 80019b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019b6:	f2c0 80a6 	blt.w	8001b06 <__divdi3+0x156>
 80019ba:	2600      	movs	r6, #0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f2c0 809c 	blt.w	8001afa <__divdi3+0x14a>
 80019c2:	4688      	mov	r8, r1
 80019c4:	4694      	mov	ip, r2
 80019c6:	469e      	mov	lr, r3
 80019c8:	4615      	mov	r5, r2
 80019ca:	4604      	mov	r4, r0
 80019cc:	460f      	mov	r7, r1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d13d      	bne.n	8001a4e <__divdi3+0x9e>
 80019d2:	428a      	cmp	r2, r1
 80019d4:	d959      	bls.n	8001a8a <__divdi3+0xda>
 80019d6:	fab2 f382 	clz	r3, r2
 80019da:	b13b      	cbz	r3, 80019ec <__divdi3+0x3c>
 80019dc:	f1c3 0220 	rsb	r2, r3, #32
 80019e0:	409f      	lsls	r7, r3
 80019e2:	fa20 f202 	lsr.w	r2, r0, r2
 80019e6:	409d      	lsls	r5, r3
 80019e8:	4317      	orrs	r7, r2
 80019ea:	409c      	lsls	r4, r3
 80019ec:	0c29      	lsrs	r1, r5, #16
 80019ee:	0c22      	lsrs	r2, r4, #16
 80019f0:	fbb7 fef1 	udiv	lr, r7, r1
 80019f4:	b2a8      	uxth	r0, r5
 80019f6:	fb01 771e 	mls	r7, r1, lr, r7
 80019fa:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80019fe:	fb00 f30e 	mul.w	r3, r0, lr
 8001a02:	42bb      	cmp	r3, r7
 8001a04:	d90a      	bls.n	8001a1c <__divdi3+0x6c>
 8001a06:	197f      	adds	r7, r7, r5
 8001a08:	f10e 32ff 	add.w	r2, lr, #4294967295
 8001a0c:	f080 8105 	bcs.w	8001c1a <__divdi3+0x26a>
 8001a10:	42bb      	cmp	r3, r7
 8001a12:	f240 8102 	bls.w	8001c1a <__divdi3+0x26a>
 8001a16:	f1ae 0e02 	sub.w	lr, lr, #2
 8001a1a:	442f      	add	r7, r5
 8001a1c:	1aff      	subs	r7, r7, r3
 8001a1e:	b2a4      	uxth	r4, r4
 8001a20:	fbb7 f3f1 	udiv	r3, r7, r1
 8001a24:	fb01 7713 	mls	r7, r1, r3, r7
 8001a28:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8001a2c:	fb00 f003 	mul.w	r0, r0, r3
 8001a30:	42b8      	cmp	r0, r7
 8001a32:	d908      	bls.n	8001a46 <__divdi3+0x96>
 8001a34:	197f      	adds	r7, r7, r5
 8001a36:	f103 32ff 	add.w	r2, r3, #4294967295
 8001a3a:	f080 80f0 	bcs.w	8001c1e <__divdi3+0x26e>
 8001a3e:	42b8      	cmp	r0, r7
 8001a40:	f240 80ed 	bls.w	8001c1e <__divdi3+0x26e>
 8001a44:	3b02      	subs	r3, #2
 8001a46:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	e003      	b.n	8001a56 <__divdi3+0xa6>
 8001a4e:	428b      	cmp	r3, r1
 8001a50:	d90f      	bls.n	8001a72 <__divdi3+0xc2>
 8001a52:	2200      	movs	r2, #0
 8001a54:	4613      	mov	r3, r2
 8001a56:	1c34      	adds	r4, r6, #0
 8001a58:	bf18      	it	ne
 8001a5a:	2401      	movne	r4, #1
 8001a5c:	4260      	negs	r0, r4
 8001a5e:	f04f 0500 	mov.w	r5, #0
 8001a62:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8001a66:	4058      	eors	r0, r3
 8001a68:	4051      	eors	r1, r2
 8001a6a:	1900      	adds	r0, r0, r4
 8001a6c:	4169      	adcs	r1, r5
 8001a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a72:	fab3 f283 	clz	r2, r3
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	f040 8086 	bne.w	8001b88 <__divdi3+0x1d8>
 8001a7c:	428b      	cmp	r3, r1
 8001a7e:	d302      	bcc.n	8001a86 <__divdi3+0xd6>
 8001a80:	4584      	cmp	ip, r0
 8001a82:	f200 80db 	bhi.w	8001c3c <__divdi3+0x28c>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e7e5      	b.n	8001a56 <__divdi3+0xa6>
 8001a8a:	b912      	cbnz	r2, 8001a92 <__divdi3+0xe2>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	fbb3 f5f2 	udiv	r5, r3, r2
 8001a92:	fab5 f085 	clz	r0, r5
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d13b      	bne.n	8001b12 <__divdi3+0x162>
 8001a9a:	1b78      	subs	r0, r7, r5
 8001a9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001aa0:	fa1f fc85 	uxth.w	ip, r5
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	fbb0 f8fe 	udiv	r8, r0, lr
 8001aaa:	0c21      	lsrs	r1, r4, #16
 8001aac:	fb0e 0718 	mls	r7, lr, r8, r0
 8001ab0:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8001ab4:	fb0c f308 	mul.w	r3, ip, r8
 8001ab8:	42bb      	cmp	r3, r7
 8001aba:	d907      	bls.n	8001acc <__divdi3+0x11c>
 8001abc:	197f      	adds	r7, r7, r5
 8001abe:	f108 31ff 	add.w	r1, r8, #4294967295
 8001ac2:	d202      	bcs.n	8001aca <__divdi3+0x11a>
 8001ac4:	42bb      	cmp	r3, r7
 8001ac6:	f200 80bd 	bhi.w	8001c44 <__divdi3+0x294>
 8001aca:	4688      	mov	r8, r1
 8001acc:	1aff      	subs	r7, r7, r3
 8001ace:	b2a4      	uxth	r4, r4
 8001ad0:	fbb7 f3fe 	udiv	r3, r7, lr
 8001ad4:	fb0e 7713 	mls	r7, lr, r3, r7
 8001ad8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8001adc:	fb0c fc03 	mul.w	ip, ip, r3
 8001ae0:	45bc      	cmp	ip, r7
 8001ae2:	d907      	bls.n	8001af4 <__divdi3+0x144>
 8001ae4:	197f      	adds	r7, r7, r5
 8001ae6:	f103 31ff 	add.w	r1, r3, #4294967295
 8001aea:	d202      	bcs.n	8001af2 <__divdi3+0x142>
 8001aec:	45bc      	cmp	ip, r7
 8001aee:	f200 80a7 	bhi.w	8001c40 <__divdi3+0x290>
 8001af2:	460b      	mov	r3, r1
 8001af4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001af8:	e7ad      	b.n	8001a56 <__divdi3+0xa6>
 8001afa:	4252      	negs	r2, r2
 8001afc:	ea6f 0606 	mvn.w	r6, r6
 8001b00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001b04:	e75d      	b.n	80019c2 <__divdi3+0x12>
 8001b06:	4240      	negs	r0, r0
 8001b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001b0c:	f04f 36ff 	mov.w	r6, #4294967295
 8001b10:	e754      	b.n	80019bc <__divdi3+0xc>
 8001b12:	f1c0 0220 	rsb	r2, r0, #32
 8001b16:	fa24 f102 	lsr.w	r1, r4, r2
 8001b1a:	fa07 f300 	lsl.w	r3, r7, r0
 8001b1e:	4085      	lsls	r5, r0
 8001b20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001b24:	40d7      	lsrs	r7, r2
 8001b26:	4319      	orrs	r1, r3
 8001b28:	fbb7 f2fe 	udiv	r2, r7, lr
 8001b2c:	0c0b      	lsrs	r3, r1, #16
 8001b2e:	fb0e 7712 	mls	r7, lr, r2, r7
 8001b32:	fa1f fc85 	uxth.w	ip, r5
 8001b36:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8001b3a:	fb0c f702 	mul.w	r7, ip, r2
 8001b3e:	429f      	cmp	r7, r3
 8001b40:	fa04 f400 	lsl.w	r4, r4, r0
 8001b44:	d907      	bls.n	8001b56 <__divdi3+0x1a6>
 8001b46:	195b      	adds	r3, r3, r5
 8001b48:	f102 30ff 	add.w	r0, r2, #4294967295
 8001b4c:	d274      	bcs.n	8001c38 <__divdi3+0x288>
 8001b4e:	429f      	cmp	r7, r3
 8001b50:	d972      	bls.n	8001c38 <__divdi3+0x288>
 8001b52:	3a02      	subs	r2, #2
 8001b54:	442b      	add	r3, r5
 8001b56:	1bdf      	subs	r7, r3, r7
 8001b58:	b289      	uxth	r1, r1
 8001b5a:	fbb7 f8fe 	udiv	r8, r7, lr
 8001b5e:	fb0e 7318 	mls	r3, lr, r8, r7
 8001b62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001b66:	fb0c f708 	mul.w	r7, ip, r8
 8001b6a:	429f      	cmp	r7, r3
 8001b6c:	d908      	bls.n	8001b80 <__divdi3+0x1d0>
 8001b6e:	195b      	adds	r3, r3, r5
 8001b70:	f108 31ff 	add.w	r1, r8, #4294967295
 8001b74:	d25c      	bcs.n	8001c30 <__divdi3+0x280>
 8001b76:	429f      	cmp	r7, r3
 8001b78:	d95a      	bls.n	8001c30 <__divdi3+0x280>
 8001b7a:	f1a8 0802 	sub.w	r8, r8, #2
 8001b7e:	442b      	add	r3, r5
 8001b80:	1bd8      	subs	r0, r3, r7
 8001b82:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8001b86:	e78e      	b.n	8001aa6 <__divdi3+0xf6>
 8001b88:	f1c2 0320 	rsb	r3, r2, #32
 8001b8c:	fa2c f103 	lsr.w	r1, ip, r3
 8001b90:	fa0e fe02 	lsl.w	lr, lr, r2
 8001b94:	fa20 f703 	lsr.w	r7, r0, r3
 8001b98:	ea41 0e0e 	orr.w	lr, r1, lr
 8001b9c:	fa08 f002 	lsl.w	r0, r8, r2
 8001ba0:	fa28 f103 	lsr.w	r1, r8, r3
 8001ba4:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8001ba8:	4338      	orrs	r0, r7
 8001baa:	fbb1 f8f5 	udiv	r8, r1, r5
 8001bae:	0c03      	lsrs	r3, r0, #16
 8001bb0:	fb05 1118 	mls	r1, r5, r8, r1
 8001bb4:	fa1f f78e 	uxth.w	r7, lr
 8001bb8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001bbc:	fb07 f308 	mul.w	r3, r7, r8
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8001bc6:	d909      	bls.n	8001bdc <__divdi3+0x22c>
 8001bc8:	eb11 010e 	adds.w	r1, r1, lr
 8001bcc:	f108 39ff 	add.w	r9, r8, #4294967295
 8001bd0:	d230      	bcs.n	8001c34 <__divdi3+0x284>
 8001bd2:	428b      	cmp	r3, r1
 8001bd4:	d92e      	bls.n	8001c34 <__divdi3+0x284>
 8001bd6:	f1a8 0802 	sub.w	r8, r8, #2
 8001bda:	4471      	add	r1, lr
 8001bdc:	1ac9      	subs	r1, r1, r3
 8001bde:	b280      	uxth	r0, r0
 8001be0:	fbb1 f3f5 	udiv	r3, r1, r5
 8001be4:	fb05 1113 	mls	r1, r5, r3, r1
 8001be8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001bec:	fb07 f703 	mul.w	r7, r7, r3
 8001bf0:	428f      	cmp	r7, r1
 8001bf2:	d908      	bls.n	8001c06 <__divdi3+0x256>
 8001bf4:	eb11 010e 	adds.w	r1, r1, lr
 8001bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8001bfc:	d216      	bcs.n	8001c2c <__divdi3+0x27c>
 8001bfe:	428f      	cmp	r7, r1
 8001c00:	d914      	bls.n	8001c2c <__divdi3+0x27c>
 8001c02:	3b02      	subs	r3, #2
 8001c04:	4471      	add	r1, lr
 8001c06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001c0a:	1bc9      	subs	r1, r1, r7
 8001c0c:	fba3 890c 	umull	r8, r9, r3, ip
 8001c10:	4549      	cmp	r1, r9
 8001c12:	d309      	bcc.n	8001c28 <__divdi3+0x278>
 8001c14:	d005      	beq.n	8001c22 <__divdi3+0x272>
 8001c16:	2200      	movs	r2, #0
 8001c18:	e71d      	b.n	8001a56 <__divdi3+0xa6>
 8001c1a:	4696      	mov	lr, r2
 8001c1c:	e6fe      	b.n	8001a1c <__divdi3+0x6c>
 8001c1e:	4613      	mov	r3, r2
 8001c20:	e711      	b.n	8001a46 <__divdi3+0x96>
 8001c22:	4094      	lsls	r4, r2
 8001c24:	4544      	cmp	r4, r8
 8001c26:	d2f6      	bcs.n	8001c16 <__divdi3+0x266>
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	e7f4      	b.n	8001c16 <__divdi3+0x266>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	e7ea      	b.n	8001c06 <__divdi3+0x256>
 8001c30:	4688      	mov	r8, r1
 8001c32:	e7a5      	b.n	8001b80 <__divdi3+0x1d0>
 8001c34:	46c8      	mov	r8, r9
 8001c36:	e7d1      	b.n	8001bdc <__divdi3+0x22c>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	e78c      	b.n	8001b56 <__divdi3+0x1a6>
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	e70a      	b.n	8001a56 <__divdi3+0xa6>
 8001c40:	3b02      	subs	r3, #2
 8001c42:	e757      	b.n	8001af4 <__divdi3+0x144>
 8001c44:	f1a8 0802 	sub.w	r8, r8, #2
 8001c48:	442f      	add	r7, r5
 8001c4a:	e73f      	b.n	8001acc <__divdi3+0x11c>

08001c4c <__udivdi3>:
 8001c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d144      	bne.n	8001cde <__udivdi3+0x92>
 8001c54:	428a      	cmp	r2, r1
 8001c56:	4615      	mov	r5, r2
 8001c58:	4604      	mov	r4, r0
 8001c5a:	d94f      	bls.n	8001cfc <__udivdi3+0xb0>
 8001c5c:	fab2 f782 	clz	r7, r2
 8001c60:	460e      	mov	r6, r1
 8001c62:	b14f      	cbz	r7, 8001c78 <__udivdi3+0x2c>
 8001c64:	f1c7 0320 	rsb	r3, r7, #32
 8001c68:	40b9      	lsls	r1, r7
 8001c6a:	fa20 f603 	lsr.w	r6, r0, r3
 8001c6e:	fa02 f507 	lsl.w	r5, r2, r7
 8001c72:	430e      	orrs	r6, r1
 8001c74:	fa00 f407 	lsl.w	r4, r0, r7
 8001c78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001c7c:	0c23      	lsrs	r3, r4, #16
 8001c7e:	fbb6 f0fe 	udiv	r0, r6, lr
 8001c82:	b2af      	uxth	r7, r5
 8001c84:	fb0e 6110 	mls	r1, lr, r0, r6
 8001c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001c8c:	fb07 f100 	mul.w	r1, r7, r0
 8001c90:	4299      	cmp	r1, r3
 8001c92:	d909      	bls.n	8001ca8 <__udivdi3+0x5c>
 8001c94:	195b      	adds	r3, r3, r5
 8001c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8001c9a:	f080 80ec 	bcs.w	8001e76 <__udivdi3+0x22a>
 8001c9e:	4299      	cmp	r1, r3
 8001ca0:	f240 80e9 	bls.w	8001e76 <__udivdi3+0x22a>
 8001ca4:	3802      	subs	r0, #2
 8001ca6:	442b      	add	r3, r5
 8001ca8:	1a5a      	subs	r2, r3, r1
 8001caa:	b2a4      	uxth	r4, r4
 8001cac:	fbb2 f3fe 	udiv	r3, r2, lr
 8001cb0:	fb0e 2213 	mls	r2, lr, r3, r2
 8001cb4:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8001cb8:	fb07 f703 	mul.w	r7, r7, r3
 8001cbc:	4297      	cmp	r7, r2
 8001cbe:	d908      	bls.n	8001cd2 <__udivdi3+0x86>
 8001cc0:	1952      	adds	r2, r2, r5
 8001cc2:	f103 31ff 	add.w	r1, r3, #4294967295
 8001cc6:	f080 80d8 	bcs.w	8001e7a <__udivdi3+0x22e>
 8001cca:	4297      	cmp	r7, r2
 8001ccc:	f240 80d5 	bls.w	8001e7a <__udivdi3+0x22e>
 8001cd0:	3b02      	subs	r3, #2
 8001cd2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001cd6:	2600      	movs	r6, #0
 8001cd8:	4631      	mov	r1, r6
 8001cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cde:	428b      	cmp	r3, r1
 8001ce0:	d847      	bhi.n	8001d72 <__udivdi3+0x126>
 8001ce2:	fab3 f683 	clz	r6, r3
 8001ce6:	2e00      	cmp	r6, #0
 8001ce8:	d148      	bne.n	8001d7c <__udivdi3+0x130>
 8001cea:	428b      	cmp	r3, r1
 8001cec:	d302      	bcc.n	8001cf4 <__udivdi3+0xa8>
 8001cee:	4282      	cmp	r2, r0
 8001cf0:	f200 80cd 	bhi.w	8001e8e <__udivdi3+0x242>
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	4631      	mov	r1, r6
 8001cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cfc:	b912      	cbnz	r2, 8001d04 <__udivdi3+0xb8>
 8001cfe:	2501      	movs	r5, #1
 8001d00:	fbb5 f5f2 	udiv	r5, r5, r2
 8001d04:	fab5 f885 	clz	r8, r5
 8001d08:	f1b8 0f00 	cmp.w	r8, #0
 8001d0c:	d177      	bne.n	8001dfe <__udivdi3+0x1b2>
 8001d0e:	1b4a      	subs	r2, r1, r5
 8001d10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001d14:	b2af      	uxth	r7, r5
 8001d16:	2601      	movs	r6, #1
 8001d18:	fbb2 f0fe 	udiv	r0, r2, lr
 8001d1c:	0c23      	lsrs	r3, r4, #16
 8001d1e:	fb0e 2110 	mls	r1, lr, r0, r2
 8001d22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001d26:	fb07 f300 	mul.w	r3, r7, r0
 8001d2a:	428b      	cmp	r3, r1
 8001d2c:	d907      	bls.n	8001d3e <__udivdi3+0xf2>
 8001d2e:	1949      	adds	r1, r1, r5
 8001d30:	f100 32ff 	add.w	r2, r0, #4294967295
 8001d34:	d202      	bcs.n	8001d3c <__udivdi3+0xf0>
 8001d36:	428b      	cmp	r3, r1
 8001d38:	f200 80ba 	bhi.w	8001eb0 <__udivdi3+0x264>
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	1ac9      	subs	r1, r1, r3
 8001d40:	b2a4      	uxth	r4, r4
 8001d42:	fbb1 f3fe 	udiv	r3, r1, lr
 8001d46:	fb0e 1113 	mls	r1, lr, r3, r1
 8001d4a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001d4e:	fb07 f703 	mul.w	r7, r7, r3
 8001d52:	42a7      	cmp	r7, r4
 8001d54:	d908      	bls.n	8001d68 <__udivdi3+0x11c>
 8001d56:	1964      	adds	r4, r4, r5
 8001d58:	f103 32ff 	add.w	r2, r3, #4294967295
 8001d5c:	f080 808f 	bcs.w	8001e7e <__udivdi3+0x232>
 8001d60:	42a7      	cmp	r7, r4
 8001d62:	f240 808c 	bls.w	8001e7e <__udivdi3+0x232>
 8001d66:	3b02      	subs	r3, #2
 8001d68:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001d6c:	4631      	mov	r1, r6
 8001d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d72:	2600      	movs	r6, #0
 8001d74:	4630      	mov	r0, r6
 8001d76:	4631      	mov	r1, r6
 8001d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d7c:	f1c6 0420 	rsb	r4, r6, #32
 8001d80:	fa22 f504 	lsr.w	r5, r2, r4
 8001d84:	40b3      	lsls	r3, r6
 8001d86:	432b      	orrs	r3, r5
 8001d88:	fa20 fc04 	lsr.w	ip, r0, r4
 8001d8c:	fa01 f706 	lsl.w	r7, r1, r6
 8001d90:	fa21 f504 	lsr.w	r5, r1, r4
 8001d94:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001d98:	ea4c 0707 	orr.w	r7, ip, r7
 8001d9c:	fbb5 f8fe 	udiv	r8, r5, lr
 8001da0:	0c39      	lsrs	r1, r7, #16
 8001da2:	fb0e 5518 	mls	r5, lr, r8, r5
 8001da6:	fa1f fc83 	uxth.w	ip, r3
 8001daa:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8001dae:	fb0c f108 	mul.w	r1, ip, r8
 8001db2:	42a9      	cmp	r1, r5
 8001db4:	fa02 f206 	lsl.w	r2, r2, r6
 8001db8:	d904      	bls.n	8001dc4 <__udivdi3+0x178>
 8001dba:	18ed      	adds	r5, r5, r3
 8001dbc:	f108 34ff 	add.w	r4, r8, #4294967295
 8001dc0:	d367      	bcc.n	8001e92 <__udivdi3+0x246>
 8001dc2:	46a0      	mov	r8, r4
 8001dc4:	1a6d      	subs	r5, r5, r1
 8001dc6:	b2bf      	uxth	r7, r7
 8001dc8:	fbb5 f4fe 	udiv	r4, r5, lr
 8001dcc:	fb0e 5514 	mls	r5, lr, r4, r5
 8001dd0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8001dd4:	fb0c fc04 	mul.w	ip, ip, r4
 8001dd8:	458c      	cmp	ip, r1
 8001dda:	d904      	bls.n	8001de6 <__udivdi3+0x19a>
 8001ddc:	18c9      	adds	r1, r1, r3
 8001dde:	f104 35ff 	add.w	r5, r4, #4294967295
 8001de2:	d35c      	bcc.n	8001e9e <__udivdi3+0x252>
 8001de4:	462c      	mov	r4, r5
 8001de6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8001dea:	ebcc 0101 	rsb	r1, ip, r1
 8001dee:	fba4 2302 	umull	r2, r3, r4, r2
 8001df2:	4299      	cmp	r1, r3
 8001df4:	d348      	bcc.n	8001e88 <__udivdi3+0x23c>
 8001df6:	d044      	beq.n	8001e82 <__udivdi3+0x236>
 8001df8:	4620      	mov	r0, r4
 8001dfa:	2600      	movs	r6, #0
 8001dfc:	e76c      	b.n	8001cd8 <__udivdi3+0x8c>
 8001dfe:	f1c8 0420 	rsb	r4, r8, #32
 8001e02:	fa01 f308 	lsl.w	r3, r1, r8
 8001e06:	fa05 f508 	lsl.w	r5, r5, r8
 8001e0a:	fa20 f704 	lsr.w	r7, r0, r4
 8001e0e:	40e1      	lsrs	r1, r4
 8001e10:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001e14:	431f      	orrs	r7, r3
 8001e16:	fbb1 f6fe 	udiv	r6, r1, lr
 8001e1a:	0c3a      	lsrs	r2, r7, #16
 8001e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8001e20:	fa1f fc85 	uxth.w	ip, r5
 8001e24:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8001e28:	fb0c f206 	mul.w	r2, ip, r6
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	fa00 f408 	lsl.w	r4, r0, r8
 8001e32:	d907      	bls.n	8001e44 <__udivdi3+0x1f8>
 8001e34:	195b      	adds	r3, r3, r5
 8001e36:	f106 31ff 	add.w	r1, r6, #4294967295
 8001e3a:	d237      	bcs.n	8001eac <__udivdi3+0x260>
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d935      	bls.n	8001eac <__udivdi3+0x260>
 8001e40:	3e02      	subs	r6, #2
 8001e42:	442b      	add	r3, r5
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	b2bf      	uxth	r7, r7
 8001e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8001e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001e50:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8001e54:	fb0c f100 	mul.w	r1, ip, r0
 8001e58:	4299      	cmp	r1, r3
 8001e5a:	d907      	bls.n	8001e6c <__udivdi3+0x220>
 8001e5c:	195b      	adds	r3, r3, r5
 8001e5e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001e62:	d221      	bcs.n	8001ea8 <__udivdi3+0x25c>
 8001e64:	4299      	cmp	r1, r3
 8001e66:	d91f      	bls.n	8001ea8 <__udivdi3+0x25c>
 8001e68:	3802      	subs	r0, #2
 8001e6a:	442b      	add	r3, r5
 8001e6c:	1a5a      	subs	r2, r3, r1
 8001e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001e72:	4667      	mov	r7, ip
 8001e74:	e750      	b.n	8001d18 <__udivdi3+0xcc>
 8001e76:	4610      	mov	r0, r2
 8001e78:	e716      	b.n	8001ca8 <__udivdi3+0x5c>
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	e729      	b.n	8001cd2 <__udivdi3+0x86>
 8001e7e:	4613      	mov	r3, r2
 8001e80:	e772      	b.n	8001d68 <__udivdi3+0x11c>
 8001e82:	40b0      	lsls	r0, r6
 8001e84:	4290      	cmp	r0, r2
 8001e86:	d2b7      	bcs.n	8001df8 <__udivdi3+0x1ac>
 8001e88:	1e60      	subs	r0, r4, #1
 8001e8a:	2600      	movs	r6, #0
 8001e8c:	e724      	b.n	8001cd8 <__udivdi3+0x8c>
 8001e8e:	4630      	mov	r0, r6
 8001e90:	e722      	b.n	8001cd8 <__udivdi3+0x8c>
 8001e92:	42a9      	cmp	r1, r5
 8001e94:	d995      	bls.n	8001dc2 <__udivdi3+0x176>
 8001e96:	f1a8 0802 	sub.w	r8, r8, #2
 8001e9a:	441d      	add	r5, r3
 8001e9c:	e792      	b.n	8001dc4 <__udivdi3+0x178>
 8001e9e:	458c      	cmp	ip, r1
 8001ea0:	d9a0      	bls.n	8001de4 <__udivdi3+0x198>
 8001ea2:	3c02      	subs	r4, #2
 8001ea4:	4419      	add	r1, r3
 8001ea6:	e79e      	b.n	8001de6 <__udivdi3+0x19a>
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	e7df      	b.n	8001e6c <__udivdi3+0x220>
 8001eac:	460e      	mov	r6, r1
 8001eae:	e7c9      	b.n	8001e44 <__udivdi3+0x1f8>
 8001eb0:	3802      	subs	r0, #2
 8001eb2:	4429      	add	r1, r5
 8001eb4:	e743      	b.n	8001d3e <__udivdi3+0xf2>
 8001eb6:	bf00      	nop

08001eb8 <__libc_init_array>:
 8001eb8:	b570      	push	{r4, r5, r6, lr}
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <__libc_init_array+0x3c>)
 8001ebc:	4c0e      	ldr	r4, [pc, #56]	; (8001ef8 <__libc_init_array+0x40>)
 8001ebe:	1ae4      	subs	r4, r4, r3
 8001ec0:	10a4      	asrs	r4, r4, #2
 8001ec2:	2500      	movs	r5, #0
 8001ec4:	461e      	mov	r6, r3
 8001ec6:	42a5      	cmp	r5, r4
 8001ec8:	d004      	beq.n	8001ed4 <__libc_init_array+0x1c>
 8001eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ece:	4798      	blx	r3
 8001ed0:	3501      	adds	r5, #1
 8001ed2:	e7f8      	b.n	8001ec6 <__libc_init_array+0xe>
 8001ed4:	f7ff f8b6 	bl	8001044 <_init>
 8001ed8:	4c08      	ldr	r4, [pc, #32]	; (8001efc <__libc_init_array+0x44>)
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <__libc_init_array+0x48>)
 8001edc:	1ae4      	subs	r4, r4, r3
 8001ede:	10a4      	asrs	r4, r4, #2
 8001ee0:	2500      	movs	r5, #0
 8001ee2:	461e      	mov	r6, r3
 8001ee4:	42a5      	cmp	r5, r4
 8001ee6:	d004      	beq.n	8001ef2 <__libc_init_array+0x3a>
 8001ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001eec:	4798      	blx	r3
 8001eee:	3501      	adds	r5, #1
 8001ef0:	e7f8      	b.n	8001ee4 <__libc_init_array+0x2c>
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
 8001ef4:	1fffc838 	.word	0x1fffc838
 8001ef8:	1fffc838 	.word	0x1fffc838
 8001efc:	1fffc838 	.word	0x1fffc838
 8001f00:	1fffc838 	.word	0x1fffc838

08001f04 <INTERRUPT_0>:
 8001f04:	01003f31                                1?..

08001f08 <LED1>:
 8001f08:	48028000 00000080 00010000 00000000     ...H............
 8001f18:	00000001 01040350 00010000 00000000     ....P...........
 8001f28:	00010000 01010101                       ........
