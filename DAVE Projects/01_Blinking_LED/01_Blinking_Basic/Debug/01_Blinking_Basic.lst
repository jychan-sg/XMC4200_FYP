
01_Blinking_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000094c  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  1fffc000  1fffc000  0000c000  2**0
                  ALLOC
  2 .no_init      00000020  20005fc0  20005fc0  0000c000  2**2
                  ALLOC
  3 .debug_aranges 00000170  00000000  00000000  00008950  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00002a40  00000000  00000000  00008ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000acf  00000000  00000000  0000b500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000123e  00000000  00000000  0000bfcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000034c  00000000  00000000  0000d210  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000e75  00000000  00000000  0000d55c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000588  00000000  00000000  0000e3d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c8  00000000  00000000  0000e959  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .build_attributes 0000020f  00000000  00000000  0000ea21  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800003c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800004c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 80000e8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000f8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000108:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...
 8000130:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 8000150:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 8000160:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000170:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000180:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000190:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001a0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001b0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 80001d8:	91 02 00 08 00 00 00 00 91 02 00 08 91 02 00 08     ................
 80001e8:	00 00 00 00 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000200:	f8df d06c 	ldr.w	sp, [pc, #108]	; 8000270 <__zero_table_end__>
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <__zero_table_end__+0x4>)
    .thumb
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1b      	ldr	r4, [pc, #108]	; (8000278 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1c      	ldr	r5, [pc, #112]	; (800027c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c17      	ldr	r4, [pc, #92]	; (8000284 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c00094c 	.word	0x0c00094c
 800024c:	1fffc800 	.word	0x1fffc800
 8000250:	00000000 	.word	0x00000000
 8000254:	0c00094c 	.word	0x0c00094c
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fffc800 	.word	0x1fffc800
 8000264:	00000000 	.word	0x00000000
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000

08000270 <__zero_table_end__>:
    .long   0                           /* Not Available                 */
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

 8000270:	1fffc800 	.word	0x1fffc800
/* ================== START OF VECTOR ROUTINES ============================= */

	.align	1
 8000274:	080002bd 	.word	0x080002bd
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000278:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800027c:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000280:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 8000284:	08000270 	.word	0x08000270
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000288:	080008ed 	.word	0x080008ed
    blx  r0
#endif

    ldr  r0, =main
 800028c:	0800086d 	.word	0x0800086d

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e003      	b.n	80002aa <delay+0x16>
  {
    __NOP();
 80002a2:	bf00      	nop
 *******************************************************************************/
static void delay(uint32_t cycles)
{
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	3301      	adds	r3, #1
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d3f7      	bcc.n	80002a2 <delay+0xe>
  {
    __NOP();
  }
}
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002bc:	b598      	push	{r3, r4, r7, lr}
 80002be:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <SystemInit+0x28>)
 80002c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002c6:	4614      	mov	r4, r2
 80002c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <SystemInit+0x2c>)
 80002d0:	4a06      	ldr	r2, [pc, #24]	; (80002ec <SystemInit+0x30>)
 80002d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 80002d8:	f000 f80a 	bl	80002f0 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002dc:	f000 f840 	bl	8000360 <SystemCoreClockSetup>
}
 80002e0:	bd98      	pop	{r3, r4, r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20005fc4 	.word	0x20005fc4
 80002e8:	20005fd4 	.word	0x20005fd4
 80002ec:	20000084 	.word	0x20000084

080002f0 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f6:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002f8:	4b16      	ldr	r3, [pc, #88]	; (8000354 <SystemCoreSetup+0x64>)
 80002fa:	4a17      	ldr	r2, [pc, #92]	; (8000358 <SystemCoreSetup+0x68>)
 80002fc:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002fe:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000302:	b662      	cpsie	i
  /* __FPU_USED value depends on compiler/linker options. */
  /* __FPU_USED = 0 if -mfloat-abi=soft is selected */
  /* __FPU_USED = 1 if -mfloat-abi=softfp or –mfloat-abi=hard */

#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000304:	4a13      	ldr	r2, [pc, #76]	; (8000354 <SystemCoreSetup+0x64>)
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <SystemCoreSetup+0x64>)
 8000308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800030c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#else
  SCB->CPACR = 0;
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000314:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <SystemCoreSetup+0x64>)
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <SystemCoreSetup+0x64>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f023 0308 	bic.w	r3, r3, #8
 800031e:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 8000320:	4b0e      	ldr	r3, [pc, #56]	; (800035c <SystemCoreSetup+0x6c>)
 8000322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000326:	3314      	adds	r3, #20
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f023 030f 	bic.w	r3, r3, #15
 8000332:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <SystemCoreSetup+0x6c>)
 800033e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000342:	3314      	adds	r3, #20
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	601a      	str	r2, [r3, #0]
}
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000ed00 	.word	0xe000ed00
 8000358:	08000000 	.word	0x08000000
 800035c:	58001000 	.word	0x58001000

08000360 <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000364:	4b6e      	ldr	r3, [pc, #440]	; (8000520 <SystemCoreClockSetup+0x1c0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	2b00      	cmp	r3, #0
 800036e:	d10c      	bne.n	800038a <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 8000370:	4a6b      	ldr	r2, [pc, #428]	; (8000520 <SystemCoreClockSetup+0x1c0>)
 8000372:	4b6b      	ldr	r3, [pc, #428]	; (8000520 <SystemCoreClockSetup+0x1c0>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 800037c:	bf00      	nop
 800037e:	4b68      	ldr	r3, [pc, #416]	; (8000520 <SystemCoreClockSetup+0x1c0>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	2b00      	cmp	r3, #0
 8000388:	d0f9      	beq.n	800037e <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 800038a:	4b66      	ldr	r3, [pc, #408]	; (8000524 <SystemCoreClockSetup+0x1c4>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000392:	2b00      	cmp	r3, #0
 8000394:	d009      	beq.n	80003aa <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 8000396:	4a63      	ldr	r2, [pc, #396]	; (8000524 <SystemCoreClockSetup+0x1c4>)
 8000398:	4b62      	ldr	r3, [pc, #392]	; (8000524 <SystemCoreClockSetup+0x1c4>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003a0:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80003a2:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80003a6:	f7ff ff75 	bl	8000294 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80003aa:	4a5f      	ldr	r2, [pc, #380]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 80003ac:	4b5e      	ldr	r3, [pc, #376]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003b4:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003b6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003ba:	f7ff ff6b 	bl	8000294 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003be:	4a5a      	ldr	r2, [pc, #360]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 80003c0:	4b59      	ldr	r3, [pc, #356]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003c8:	f023 0302 	bic.w	r3, r3, #2
 80003cc:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003ce:	4b57      	ldr	r3, [pc, #348]	; (800052c <SystemCoreClockSetup+0x1cc>)
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d026      	beq.n	8000428 <SystemCoreClockSetup+0xc8>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk);
 80003da:	4a54      	ldr	r2, [pc, #336]	; (800052c <SystemCoreClockSetup+0x1cc>)
 80003dc:	4b53      	ldr	r3, [pc, #332]	; (800052c <SystemCoreClockSetup+0x1cc>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003e8:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003ea:	f000 f917 	bl	800061c <OSCHP_GetFrequency>
 80003ee:	4602      	mov	r2, r0
 80003f0:	4b4f      	ldr	r3, [pc, #316]	; (8000530 <SystemCoreClockSetup+0x1d0>)
 80003f2:	fba3 2302 	umull	r2, r3, r3, r2
 80003f6:	0d1b      	lsrs	r3, r3, #20
 80003f8:	3b01      	subs	r3, #1
 80003fa:	041b      	lsls	r3, r3, #16
 80003fc:	494b      	ldr	r1, [pc, #300]	; (800052c <SystemCoreClockSetup+0x1cc>)
 80003fe:	4a4b      	ldr	r2, [pc, #300]	; (800052c <SystemCoreClockSetup+0x1cc>)
 8000400:	6852      	ldr	r2, [r2, #4]
 8000402:	4313      	orrs	r3, r2
 8000404:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 = 0;
 8000406:	4b48      	ldr	r3, [pc, #288]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800040c:	4a46      	ldr	r2, [pc, #280]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 800040e:	4b46      	ldr	r3, [pc, #280]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000416:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000418:	bf00      	nop
 800041a:	4b43      	ldr	r3, [pc, #268]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000422:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000426:	d1f8      	bne.n	800041a <SystemCoreClockSetup+0xba>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000428:	4a3f      	ldr	r2, [pc, #252]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 800042a:	4b3f      	ldr	r3, [pc, #252]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000434:	bf00      	nop
 8000436:	4b3c      	ldr	r3, [pc, #240]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f9      	beq.n	8000436 <SystemCoreClockSetup+0xd6>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000442:	4a39      	ldr	r2, [pc, #228]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000444:	4b38      	ldr	r3, [pc, #224]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	f043 0310 	orr.w	r3, r3, #16
 800044c:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800044e:	4b36      	ldr	r3, [pc, #216]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000450:	4a38      	ldr	r2, [pc, #224]	; (8000534 <SystemCoreClockSetup+0x1d4>)
 8000452:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000454:	4a34      	ldr	r2, [pc, #208]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000456:	4b34      	ldr	r3, [pc, #208]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800045e:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000460:	4a31      	ldr	r2, [pc, #196]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000462:	4b31      	ldr	r3, [pc, #196]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	f023 0310 	bic.w	r3, r3, #16
 800046a:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 800046c:	4a2e      	ldr	r2, [pc, #184]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 800046e:	4b2e      	ldr	r3, [pc, #184]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000476:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000478:	bf00      	nop
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f003 0304 	and.w	r3, r3, #4
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0f9      	beq.n	800047a <SystemCoreClockSetup+0x11a>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000486:	4a28      	ldr	r2, [pc, #160]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f023 0301 	bic.w	r3, r3, #1
 8000490:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000492:	bf00      	nop
 8000494:	4b24      	ldr	r3, [pc, #144]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	2b00      	cmp	r3, #0
 800049e:	d1f9      	bne.n	8000494 <SystemCoreClockSetup+0x134>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80004a0:	4a25      	ldr	r2, [pc, #148]	; (8000538 <SystemCoreClockSetup+0x1d8>)
 80004a2:	4b25      	ldr	r3, [pc, #148]	; (8000538 <SystemCoreClockSetup+0x1d8>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004aa:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80004ac:	4b22      	ldr	r3, [pc, #136]	; (8000538 <SystemCoreClockSetup+0x1d8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80004b2:	4b21      	ldr	r3, [pc, #132]	; (8000538 <SystemCoreClockSetup+0x1d8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80004b8:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <SystemCoreClockSetup+0x1d8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80004be:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <SystemCoreClockSetup+0x1d8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80004c4:	4b1c      	ldr	r3, [pc, #112]	; (8000538 <SystemCoreClockSetup+0x1d8>)
 80004c6:	2203      	movs	r2, #3
 80004c8:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004ca:	4a17      	ldr	r2, [pc, #92]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 80004cc:	4b16      	ldr	r3, [pc, #88]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004d4:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004d6:	4b14      	ldr	r3, [pc, #80]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 80004d8:	4a18      	ldr	r2, [pc, #96]	; (800053c <SystemCoreClockSetup+0x1dc>)
 80004da:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 80004dc:	bf00      	nop
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	f003 0320 	and.w	r3, r3, #32
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f9      	beq.n	80004de <SystemCoreClockSetup+0x17e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_60MHZ);
 80004ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004ee:	f7ff fed1 	bl	8000294 <delay>

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 80004f4:	4a12      	ldr	r2, [pc, #72]	; (8000540 <SystemCoreClockSetup+0x1e0>)
 80004f6:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 80004f8:	bf00      	nop
 80004fa:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <SystemCoreClockSetup+0x1c8>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f003 0320 	and.w	r3, r3, #32
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f9      	beq.n	80004fa <SystemCoreClockSetup+0x19a>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  delay(DELAY_CNT_50US_80MHZ);
 8000506:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800050a:	f7ff fec3 	bl	8000294 <delay>

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <SystemCoreClockSetup+0x1e4>)
 8000510:	2205      	movs	r2, #5
 8000512:	60da      	str	r2, [r3, #12]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <SystemCoreClockSetup+0x1d8>)
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800051a:	f000 f815 	bl	8000548 <SystemCoreClockUpdate>
}
 800051e:	bd80      	pop	{r7, pc}
 8000520:	50004200 	.word	0x50004200
 8000524:	50004400 	.word	0x50004400
 8000528:	50004710 	.word	0x50004710
 800052c:	50004700 	.word	0x50004700
 8000530:	6b5fca6b 	.word	0x6b5fca6b
 8000534:	01134f00 	.word	0x01134f00
 8000538:	50004600 	.word	0x50004600
 800053c:	01074f00 	.word	0x01074f00
 8000540:	01054f00 	.word	0x01054f00
 8000544:	50004160 	.word	0x50004160

08000548 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800054e:	4b2f      	ldr	r3, [pc, #188]	; (800060c <SystemCoreClockUpdate+0xc4>)
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000556:	2b00      	cmp	r3, #0
 8000558:	d03e      	beq.n	80005d8 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800055a:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <SystemCoreClockUpdate+0xc8>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000566:	4b2b      	ldr	r3, [pc, #172]	; (8000614 <SystemCoreClockUpdate+0xcc>)
 8000568:	60fb      	str	r3, [r7, #12]
 800056a:	e002      	b.n	8000572 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 800056c:	f000 f856 	bl	800061c <OSCHP_GetFrequency>
 8000570:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000572:	4b27      	ldr	r3, [pc, #156]	; (8000610 <SystemCoreClockUpdate+0xc8>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	2b00      	cmp	r3, #0
 800057c:	d020      	beq.n	80005c0 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800057e:	4b24      	ldr	r3, [pc, #144]	; (8000610 <SystemCoreClockUpdate+0xc8>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000586:	0e1b      	lsrs	r3, r3, #24
 8000588:	3301      	adds	r3, #1
 800058a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <SystemCoreClockUpdate+0xc8>)
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	3301      	adds	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <SystemCoreClockUpdate+0xc8>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80005a2:	0c1b      	lsrs	r3, r3, #16
 80005a4:	3301      	adds	r3, #1
 80005a6:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	683a      	ldr	r2, [r7, #0]
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	68fa      	ldr	r2, [r7, #12]
 80005b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	fb02 f303 	mul.w	r3, r2, r3
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	e00d      	b.n	80005dc <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <SystemCoreClockUpdate+0xc8>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005c8:	3301      	adds	r3, #1
 80005ca:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80005cc:	68fa      	ldr	r2, [r7, #12]
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e001      	b.n	80005dc <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <SystemCoreClockUpdate+0xcc>)
 80005da:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <SystemCoreClockUpdate+0xc4>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	3301      	adds	r3, #1
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <SystemCoreClockUpdate+0xc4>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	3301      	adds	r3, #1
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fc:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <SystemCoreClockUpdate+0xd0>)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	50004600 	.word	0x50004600
 8000610:	50004710 	.word	0x50004710
 8000614:	016e3600 	.word	0x016e3600
 8000618:	20005fc0 	.word	0x20005fc0

0800061c <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000620:	4b02      	ldr	r3, [pc, #8]	; (800062c <OSCHP_GetFrequency+0x10>)
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	00b71b00 	.word	0x00b71b00

08000630 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	460b      	mov	r3, r1
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	b2db      	uxtb	r3, r3
 8000644:	4618      	mov	r0, r3
 8000646:	7afb      	ldrb	r3, [r7, #11]
 8000648:	089b      	lsrs	r3, r3, #2
 800064a:	b2db      	uxtb	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3204      	adds	r2, #4
 8000652:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000656:	7afb      	ldrb	r3, [r7, #11]
 8000658:	f003 0303 	and.w	r3, r3, #3
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	4619      	mov	r1, r3
 8000660:	23f8      	movs	r3, #248	; 0xf8
 8000662:	408b      	lsls	r3, r1
 8000664:	43db      	mvns	r3, r3
 8000666:	ea02 0103 	and.w	r1, r2, r3
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	1d02      	adds	r2, r0, #4
 800066e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000676:	7afb      	ldrb	r3, [r7, #11]
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4619      	mov	r1, r3
 800067c:	2303      	movs	r3, #3
 800067e:	408b      	lsls	r3, r1
 8000680:	43db      	mvns	r3, r3
 8000682:	401a      	ands	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4a38      	ldr	r2, [pc, #224]	; (800076c <XMC_GPIO_Init+0x13c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d10a      	bne.n	80006a6 <XMC_GPIO_Init+0x76>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	2101      	movs	r1, #1
 8000698:	fa01 f303 	lsl.w	r3, r1, r3
 800069c:	43db      	mvns	r3, r3
 800069e:	401a      	ands	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	661a      	str	r2, [r3, #96]	; 0x60
 80006a4:	e042      	b.n	800072c <XMC_GPIO_Init+0xfc>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	da3c      	bge.n	800072c <XMC_GPIO_Init+0xfc>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	685a      	ldr	r2, [r3, #4]
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	409a      	lsls	r2, r3
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80006be:	7afb      	ldrb	r3, [r7, #11]
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	08db      	lsrs	r3, r3, #3
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3210      	adds	r2, #16
 80006d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006d6:	7afb      	ldrb	r3, [r7, #11]
 80006d8:	f003 0307 	and.w	r3, r3, #7
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	4619      	mov	r1, r3
 80006e0:	2307      	movs	r3, #7
 80006e2:	408b      	lsls	r3, r1
 80006e4:	43db      	mvns	r3, r3
 80006e6:	ea02 0103 	and.w	r1, r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f100 0210 	add.w	r2, r0, #16
 80006f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	08db      	lsrs	r3, r3, #3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	7afb      	ldrb	r3, [r7, #11]
 80006fe:	08db      	lsrs	r3, r3, #3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	461a      	mov	r2, r3
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3210      	adds	r2, #16
 8000708:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	7a1b      	ldrb	r3, [r3, #8]
 8000710:	4619      	mov	r1, r3
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	f003 0307 	and.w	r3, r3, #7
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	ea42 0103 	orr.w	r1, r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f100 0210 	add.w	r2, r0, #16
 8000728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	089b      	lsrs	r3, r3, #2
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	089b      	lsrs	r3, r3, #2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3204      	adds	r2, #4
 8000740:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4619      	mov	r1, r3
 800074a:	7afb      	ldrb	r3, [r7, #11]
 800074c:	f003 0303 	and.w	r3, r3, #3
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	ea42 0103 	orr.w	r1, r2, r3
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	1d02      	adds	r2, r0, #4
 800075e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	48028e00 	.word	0x48028e00

08000770 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	460b      	mov	r3, r1
 800077a:	70fb      	strb	r3, [r7, #3]
 800077c:	4613      	mov	r3, r2
 800077e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000784:	78fb      	ldrb	r3, [r7, #3]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	4619      	mov	r1, r3
 800078a:	2303      	movs	r3, #3
 800078c:	408b      	lsls	r3, r1
 800078e:	43db      	mvns	r3, r3
 8000790:	401a      	ands	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800079a:	78bb      	ldrb	r3, [r7, #2]
 800079c:	78f9      	ldrb	r1, [r7, #3]
 800079e:	0049      	lsls	r1, r1, #1
 80007a0:	408b      	lsls	r3, r1
 80007a2:	431a      	orrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <_init>:
  }
}

/* Init */
void _init(void)
{}
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6819      	ldr	r1, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7c1a      	ldrb	r2, [r3, #16]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3304      	adds	r3, #4
 80007d4:	4608      	mov	r0, r1
 80007d6:	4611      	mov	r1, r2
 80007d8:	461a      	mov	r2, r3
 80007da:	f7ff ff29 	bl	8000630 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7c1a      	ldrb	r2, [r3, #16]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7c5b      	ldrb	r3, [r3, #17]
 80007ea:	4608      	mov	r0, r1
 80007ec:	4611      	mov	r1, r2
 80007ee:	461a      	mov	r2, r3
 80007f0:	f7ff ffbe 	bl	8000770 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop

08000800 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
  if (init_status == DAVE_STATUS_SUCCESS)
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d104      	bne.n	800081a <DAVE_Init+0x1a>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED1 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED1); 
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <DAVE_Init+0x24>)
 8000812:	f7ff ffd5 	bl	80007c0 <DIGITAL_IO_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800081a:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800081c:	4618      	mov	r0, r3
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	08000938 	.word	0x08000938

08000828 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800083a:	409a      	lsls	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	605a      	str	r2, [r3, #4]
}
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7c1b      	ldrb	r3, [r3, #16]
 800085c:	4610      	mov	r0, r2
 800085e:	4619      	mov	r1, r3
 8000860:	f7ff ffe2 	bl	8000828 <XMC_GPIO_ToggleOutput>
}
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop

0800086c <main>:
 * LED1 (DIGITIAL_IO) - I/O Connection for LED
 */
#include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaration)

int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8000872:	f7ff ffc5 	bl	8000800 <DAVE_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d000      	beq.n	8000882 <main+0x16>
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {
    }
 8000880:	e7fe      	b.n	8000880 <main+0x14>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  //DIGITAL_IO_SetOutputHigh(&LED1); //SetOutputHigh or SetOutputLow can also be used
	  DIGITAL_IO_ToggleOutput(&LED1);
 8000882:	4818      	ldr	r0, [pc, #96]	; (80008e4 <main+0x78>)
 8000884:	f7ff ffe2 	bl	800084c <DIGITAL_IO_ToggleOutput>
	  for(float count = 0 ; count < 2500000 ; count++); // 0.5 sec ON | 0.5 sec OFF
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e007      	b.n	80008a0 <main+0x34>
 8000890:	edd7 7a03 	vldr	s15, [r7, #12]
 8000894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8000898:	ee77 7a87 	vadd.f32	s15, s15, s14
 800089c:	edc7 7a03 	vstr	s15, [r7, #12]
 80008a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008a4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80008e8 <main+0x7c>
 80008a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b0:	d4ee      	bmi.n	8000890 <main+0x24>
	  //DIGITAL_IO_SetOutputLow(&LED1);
	  DIGITAL_IO_ToggleOutput(&LED1);
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <main+0x78>)
 80008b4:	f7ff ffca 	bl	800084c <DIGITAL_IO_ToggleOutput>
	  for(float count = 0 ; count < 2500000 ; count++); // 1 sec ON | 1 sec OFF
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	e007      	b.n	80008d0 <main+0x64>
 80008c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80008c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80008c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008cc:	edc7 7a02 	vstr	s15, [r7, #8]
 80008d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80008d4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80008e8 <main+0x7c>
 80008d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008e0:	d4ee      	bmi.n	80008c0 <main+0x54>
  }
 80008e2:	e7ce      	b.n	8000882 <main+0x16>
 80008e4:	08000938 	.word	0x08000938
 80008e8:	4a189680 	.word	0x4a189680

080008ec <__libc_init_array>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <__libc_init_array+0x3c>)
 80008f0:	4c0e      	ldr	r4, [pc, #56]	; (800092c <__libc_init_array+0x40>)
 80008f2:	1ae4      	subs	r4, r4, r3
 80008f4:	10a4      	asrs	r4, r4, #2
 80008f6:	2500      	movs	r5, #0
 80008f8:	461e      	mov	r6, r3
 80008fa:	42a5      	cmp	r5, r4
 80008fc:	d004      	beq.n	8000908 <__libc_init_array+0x1c>
 80008fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000902:	4798      	blx	r3
 8000904:	3501      	adds	r5, #1
 8000906:	e7f8      	b.n	80008fa <__libc_init_array+0xe>
 8000908:	f7ff ff54 	bl	80007b4 <_init>
 800090c:	4c08      	ldr	r4, [pc, #32]	; (8000930 <__libc_init_array+0x44>)
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <__libc_init_array+0x48>)
 8000910:	1ae4      	subs	r4, r4, r3
 8000912:	10a4      	asrs	r4, r4, #2
 8000914:	2500      	movs	r5, #0
 8000916:	461e      	mov	r6, r3
 8000918:	42a5      	cmp	r5, r4
 800091a:	d004      	beq.n	8000926 <__libc_init_array+0x3a>
 800091c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000920:	4798      	blx	r3
 8000922:	3501      	adds	r5, #1
 8000924:	e7f8      	b.n	8000918 <__libc_init_array+0x2c>
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	1fffc800 	.word	0x1fffc800
 800092c:	1fffc800 	.word	0x1fffc800
 8000930:	1fffc800 	.word	0x1fffc800
 8000934:	1fffc800 	.word	0x1fffc800

08000938 <LED1>:
 8000938:	48028000 00000080 00010000 00000000     ...H............
 8000948:	00000001                                ....
